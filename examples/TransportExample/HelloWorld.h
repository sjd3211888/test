// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// feature: Modify test cases
// ------------------------------------------------------------------

/*!
 * @file HelloWorld.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _EDDS_GENERATED_1319128358_HELLOWORLD_H_
#define _EDDS_GENERATED_1319128358_HELLOWORLD_H_

//

#include "SafeEnum.h"
// #include "ContainerPrintHelpers.h"

#include <vbs/Global.hpp>
#include <vbs/Topic.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <cmath>

#include <type_traits>
#include <set>

#if defined(_WIN32)
#if defined(VBS_USER_DLL_EXPORT)
#define vbs_user_DllExport __declspec(dllexport)
#else
#define vbs_user_DllExport
#endif  // VBS_USER_DLL_EXPORT
#else
#define vbs_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(VBS_USER_DLL_EXPORT)
#if defined(HelloWorld_SOURCE)
#define HelloWorld_DllAPI __declspec(dllexport)
#else
#define HelloWorld_DllAPI __declspec(dllimport)
#endif  // HelloWorld_SOURCE
#else
#define HelloWorld_DllAPI
#endif  // VBS_USER_DLL_EXPORT
#else
#define HelloWorld_DllAPI
#endif  // _WIN32

namespace vbs {
#ifndef _VBSTYPE_GEN_TEMP_
#define _VBSTYPE_GEN_TEMP_

template <typename T>
struct isVBSType<T,
                 typename std::enable_if<std::is_member_function_pointer<decltype(&T::VBSVersionPrinter)>::value>::type>
    : std::true_type {};

#endif  // _VBSTYPE_GEN_TEMP_

#ifndef _VBSTYPE_DDS_GEN_TEMP_
#define _VBSTYPE_DDS_GEN_TEMP_

template <typename T>
struct isVBSDdsType<T,
                    typename std::enable_if<std::is_member_function_pointer<decltype(&T::VBSDdsPrinter)>::value>::type>
    : std::true_type {};

#endif  // _VBSTYPE_DDS_GEN_TEMP_

}  // namespace vbs
constexpr int64_t HelloWorld_max_cdr_typesize {268ULL};
constexpr int64_t HelloWorld_max_key_cdr_typesize {0ULL};

constexpr int64_t HelloWorld_max_estimate_typesize {264ULL};

/*!
 * @brief This class represents the structure HelloWorld defined by the user in the IDL file.
 * @ingroup HELLOWORLD
 */

class HelloWorld {
 public:
    /*!
     * @brief Default constructor.
     */
    vbs_user_DllExport HelloWorld();

    /*!
     * @brief Default destructor.
     */
    vbs_user_DllExport ~HelloWorld();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    vbs_user_DllExport HelloWorld(const HelloWorld& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    vbs_user_DllExport HelloWorld(HelloWorld&& x);

    /*!
     * @brief Move constructor.
     * @param x All parameters to the object HelloWorld that will be copied.
     */
    vbs_user_DllExport HelloWorld(const uint32_t& index, const std::string& message);
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    vbs_user_DllExport HelloWorld& operator=(const HelloWorld& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object HelloWorld that will be copied.
     */
    vbs_user_DllExport HelloWorld& operator=(HelloWorld&& x);

    /*!
     * @brief Comparison operator.
     * @param x HelloWorld object to compare.
     */
    vbs_user_DllExport bool operator==(const HelloWorld& x) const;

    /*!
     * @brief Comparison operator.
     * @param x HelloWorld object to compare.
     */
    vbs_user_DllExport bool operator!=(const HelloWorld& x) const;

    /*!
     * @brief This function returns a const reference to member index
     * @param _index New value to be copied in member index
     */
    vbs_user_DllExport void index(const uint32_t& _index);
    /*!
     * @brief This function moves the value in member index
     * @param _index New value to be moved in member index
     */
    vbs_user_DllExport void index(uint32_t&& _index);

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    vbs_user_DllExport uint32_t& index();

    /*!
    * @brief This function returns the value of member index
    * @return Value of member index
    */
    vbs_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a const reference to member message
     * @param _message New value to be copied in member message
     */
    vbs_user_DllExport void message(const std::string& _message);
    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    vbs_user_DllExport void message(std::string&& _message);

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    vbs_user_DllExport std::string& message();

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    vbs_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    vbs_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    vbs_user_DllExport static size_t getCdrSerializedSize(const HelloWorld& data, size_t current_alignment = 0);

    /*!
     * @brief This function returns the size of an object.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    vbs_user_DllExport static size_t getObjectDataSize();

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    vbs_user_DllExport void serialize(vbs::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    vbs_user_DllExport void deserialize(vbs::Cdr& cdr);

    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    vbs_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);
    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    vbs_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    vbs_user_DllExport void serializeKey(vbs::Cdr& cdr) const;
    void swap(HelloWorld& other_);

    std::string to_idl_string(std::set<std::string>* processedTypes = nullptr, const bool is_top = true) const;

    static std::string get_type_name();

    friend vbs_user_DllExport std::ostream& operator<<(std::ostream& o, const HelloWorld& sample);

    void VBSVersionPrinter() { std::cout << "VBS IDL Gen Version 1.3.0-20240522-001" << std::endl; }

    void VBSDdsPrinter() { std::cout << "This is Dds code." << std::endl; }

 private:
    uint32_t m_index;
    std::string m_message;
};

inline void swap(HelloWorld& a, HelloWorld& b) {
    a.swap(b);
}

namespace vbs {
std::string data_to_json_string(const HelloWorld& sample, std::ostringstream* o_ptr = nullptr,
                                const bool is_need_delete = true, const bool include_braces = true);
}

#endif  // _EDDS_GENERATED_1319128358_HELLOWORLD_H_