// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-12 ~ 2025-05: idlgen optimization: gerrit adaptation, -rti option filename adjustment, version update, etc.
// ------------------------------------------------------------------

group ProxyHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "Proxy.h"], description=["This header file contains the declaration of the proxy for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$_PROXY_H_
#define _$ctx.filename;format="toUpper"$_PROXY_H_

#include <$ctx.includePrefix$client/Proxy.h>
#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"
$if(ctx.dds)$
#include "$ctx.filename$AsyncCallbackHandlers.$if(ctx.GenHpp)$hpp$else$h$endif$"

$endif$
$if(ctx.rtiTypes)$
#include "$ctx.filename$Extension.$if(ctx.GenHpp)$hpp$else$h$endif$"

$endif$

namespace evbs
{
    namespace rpc
    {
        namespace protocol
        {
            class $ctx.filename$Protocol;
        }
    }
}

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_PROXY_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
/*!
 * @brief This class implements a specific server's proxy for the defined interface $interface.name$.
 * @ingroup $ctx.trimfilename$
 */
class RPCUSERDllExport $interface.name$Proxy : public evbs::rpc::proxy::Proxy, public $interface.name$$if(ctx.rtiTypes)$Ext$endif$
{
    public:

        /*!
         * @brief This constructor sets the transport that will be used by the server's proxy.
         *
         * @param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
         * @param protocol The protocol used to send the information over the transport.
         *        This protocol's object is not deleted by this class in its destructor. Cannot be NULL.
         * @exception evbs::rpc::exception::InitializeException This exception is thrown when the initialization was wrong.
         */
        $interface.name$Proxy(evbs::rpc::strategy::ProxyStrategy &strategy, evbs::rpc::transport::ProxyTransport &transport,
            evbs::rpc::protocol::$ctx.filename$Protocol &protocol);

        //! @brief Destructor.
        virtual ~$interface.name$Proxy();

        $interface.all_operations : { operation |
        //! @brief Proxy method for the operation $operation.name$.
        int32_t $operation.name$(/*in*/ int32_t async_flag$paramDeclarationsRpc(params=operation.inputparam)$, /*in*/ int32_t (*func)(int32_t$if(operation.rettypeparam)$, $paramRetType(operation.rettype)$$endif$$paramDefinitionCallback(params=operation.outputparam)$), /*in*/ int32_t time);

        $if(ctx.dds)$
        $if(!operation.oneway)$
        //! @brief Proxy asynchronous method for the operation $operation.name$.
        void $operation.name$_async($interface.scopedname$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, separatorInicial=", ")$);

        $endif$
        $endif$
        }; separator="\n"$

        $export_list$
};

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
