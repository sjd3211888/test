// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2024-02 ~ 2024-03: idlgen optimization: -rti option filename adjustment, version update, etc.
// ------------------------------------------------------------------

group AsyncCallbackHandlers;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "AsyncCallbackHandlers.h"], description=["This header file contains the declaration of callback handlers used in asynchronous calls."])$

#ifndef _$ctx.filename;format="toUpper"$_ASYNC_CALLBACK_HANDLERS_H_
#define _$ctx.filename;format="toUpper"$_ASYNC_CALLBACK_HANDLERS_H_

#include <$ctx.includePrefix$exceptions/SystemException.h>
#include <$ctx.includePrefix$exceptions/UserException.h>
#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_ASYNC_CALLBACK_HANDLERS_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : { operation |
$if(!operation.oneway)$
/*!
 * @brief This abstract class defines the callbacks that eProsima RPC will call in an asynchronous call.
 *        These callback has to be implemented in a derived class.
 * @ingroup $ctx.trimfilename$
 */
class $interface.name$_$operation.name$CallbackHandler
{
    public:
        /*!
         * This function is called when is received the reply from the server.
         */
        virtual void $operation.name$($paramDeclarationsByValue(params=[operation.outputparam, operation.rettypeparam])$) = 0;

        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex) = 0;
        $if(operation.exceptions)$
        /*!
         * @brief This function is called when a user exception occurs.
         *        This user exception is launched in the server's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::UserException &ex) = 0;
        $endif$
};

$endif$
}; separator="\n"$

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

