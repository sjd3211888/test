// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2024-01 ~ 2025-05: idlgen optimization: support for RPC server sync/async distinction, -rti option filename adjustment, exception callback, zero copy variable length seq, etc.
// ------------------------------------------------------------------

group ServerImplSourceExample;

main(ctx, definitions) ::= <<

#include <iostream>
$if(ctx.NotUseVbsFramework)$
#include <erpc/server/RpcServer.h>
$else$
$endif$

#include "$ctx.filename$ServerImpl.$if(ctx.GenHpp)$hpp$else$h$endif$"

$if(ctx.TestExample)$
using namespace vbs::rpc;
$endif$

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
$if(ctx.TestExample)$
bool $interface.name$_closed = false;
$endif$

void $interface.name$_Impl::on_exception_detected(int32_t error_number, uint32_t conn_id) {
$if(ctx.TestExample)$
    (void)error_number;
    (void)conn_id;
    $interface.name$_closed = true;
$endif$

}

$interface.all_operations : {operation|
void $interface.name$_Impl::$operation.name$($if(!operation.HasMethod)$uint32_t conn_id, vbs::rpc::RequestMode req_mode$else$vbs::rpc::ServerContext* context$endif$, vbs::rpc::RpcMessageType *$operation.Inputparam : {param |$param.name$}; separator=", "$, vbs::rpc::RpcMessageType *$operation.Outputparam : {param |$param.name$}; separator=", "$) {
$if(ctx.TestExample)$
$if(operation.HasInput)$
$operation.Inputparam : {param |
        $param.typecode.CppTypename$ *req = dynamic_cast<$param.typecode.CppTypename$*>($param.name$);
}; separator="\n"$
$endif$
    std::ostringstream oss;
$if(operation.HasInput)$
    oss << (*req);
$else$
    oss << (1);
$endif$

    std::cout<<"------------------"<<std::endl;
    std::cout<<oss.str()<<std::endl;
    std::cout<<"------------------"<<std::endl;
    if ($if(operation.HasMethod)$context->$endif$req_mode == RequestMode::SYNC) {
$if(operation.HasOutput)$
$operation.Outputparam : {param |
        $param.typecode.CppTypename$ *$param.name$_sync = dynamic_cast<$param.typecode.CppTypename$*>($param.name$);
$if(operation.HasInput)$
        $param.name$_sync->basic_member(*req);
$else$
        $param.name$_sync->basic_member(1);
$endif$

        $param.name$_sync->member_string(oss.str());
}; separator="\n"$
$endif$

$if(operation.HasInput)$
        (void)$operation.Inputparam : {param |$param.name$;}; separator="\n"$
$endif$

    } else {
$if(operation.HasOutput)$
$operation.Outputparam : {param |
        $param.typecode.CppTypename$ $param.name$_async;
$if(operation.HasInput)$
        $param.name$_async.basic_member(*req);
$else$
        $param.name$_async.basic_member(1);
$endif$

        $param.name$_async.member_string(oss.str());
}; separator="\n"$
$endif$

        this->srv->send_async($if(operation.HasMethod)$context->$endif$conn_id, "$operation.name$"$if(operation.HasOutput)$, $operation.Outputparam : {param |&$param.name$_async}$$else$, nullptr$endif$, StreamStatus::COMPLETE);
    }
$endif$

}
}; separator="\n"$
$endif$

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

/*UTILS*/
evbs_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$vbs$else$vbs$endif$>>
