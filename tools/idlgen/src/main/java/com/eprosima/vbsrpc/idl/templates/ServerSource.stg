// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-12 ~ 2025-05: idlgen optimization: gerrit adaptation, -rti option filename adjustment, version update, etc.
// ------------------------------------------------------------------

group ServerSource;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "Server.cxx"], description=["This source file contains the definition of the server for all interfaces."])$

#include "$ctx.filename$Server.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include <$ctx.includePrefix$strategies/ServerStrategy.h>
#include <$ctx.includePrefix$transports/ServerTransport.h>
#include "$ctx.filename$Protocol.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include <$ctx.includePrefix$exceptions/ServerInternalException.h>

$ctx.filename$Server::$ctx.filename$Server(evbs::rpc::strategy::ServerStrategy &strategy, evbs::rpc::transport::ServerTransport &transport,
            evbs::rpc::protocol::$ctx.filename$Protocol &protocol, $ctx.filename$ServerImpl &servant) :
    Server(strategy, transport, protocol), _impl(servant)
{
   protocol.activateInterface("$ctx.filename$");
   protocol.link$ctx.filename$Impl(servant);
}

$ctx.filename$Server::~$ctx.filename$Server()
{
    //TODO Unlink an deactivate.
}
$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
