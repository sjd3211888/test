// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-12 ~ 2025-05: idlgen optimization: gerrit adaptation, -rti option filename adjustment, version update, etc.
// ------------------------------------------------------------------

group ServerHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "Server.h"], description=["This header file contains the declaration of the server for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$SERVER_H_
#define _$ctx.filename;format="toUpper"$SERVER_H_

#include <$ctx.includePrefix$server/Server.h>
#include "$ctx.filename$ServerImpl.$if(ctx.GenHpp)$hpp$else$h$endif$"

namespace evbs
{
    namespace rpc
    {
        namespace protocol
        {
            class $ctx.filename$Protocol;
        }
    }
}

/*!
 * @brief This class implements a specific server for the defined interface $interface.name$ by user.
 * @ingroup $ctx.trimfilename$
 */
class RPCUSERDllExport $ctx.filename$Server : public evbs::rpc::server::Server
{
    public:

        /*!
         * @brief This constructor sets the transport that will be used by the server.
         *
         * @param strategy Strategy used by server to work with new requests.
         *        This class doesn't delete this object in its destructor. Cannot be NULL.
         * @param transport The network transport that the server has to use.
         *        This transport's object is not deleted by this class in its destructor. Cannot be NULL.
         * @param protocol Generated protocol that the server has to use.
         *        This class has the information to process requests and build responses for this application environment.
         * @param servant Servant that the server will use to invoke user's functions.
         * @exception eProsima::RPCDDS::InitializeException This exception is thrown when the initialization was wrong.
         */
        $ctx.filename$Server(evbs::rpc::strategy::ServerStrategy &strategy, evbs::rpc::transport::ServerTransport &transport,
            evbs::rpc::protocol::$ctx.filename$Protocol &protocol, $ctx.filename$ServerImpl &servant);

        //! @brief Destructor.
        virtual ~$ctx.filename$Server();

     private:

        //! \brief Pointer to the server's servant implemented by the user.
        $ctx.filename$ServerImpl &_impl;
};
$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$SERVER_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
