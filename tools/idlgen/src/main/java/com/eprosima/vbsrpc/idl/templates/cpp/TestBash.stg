/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group TestBash;

main(ctx, definitions) ::= <<

#!/bin/bash

if [ "\$#" -ne 1 ]; then
    echo "Usage: \$0 <release_path>"
    exit 1
fi

pkill -f './$ctx.OnlyFileName$Server'
pkill -f './$ctx.OnlyFileName$Client'

sleep 3

export LD_LIBRARY_PATH=\$1/vbs/lib/:\$1/third-party/lib/
export VBS_SHM_TYPE_DISCOVERY_ONLINE_ENV=1
./$ctx.OnlyFileName$Server > sub_test.txt 2>&1 &
sub_pid=\$!

sleep 0.1

./$ctx.OnlyFileName$Client > pub_test.txt 2>&1 &
pub_pid=\$!

sleep 4

wait \$pub_pid 2>/dev/null
wait \$sub_pid 2>/dev/null

wc -c < pub_test.txt
wc -c < sub_test.txt

search_string="RPC pass"

if grep -q "\$search_string" pub_test.txt && grep -q "\$search_string" sub_test.txt; then
    echo "两个文件都包含 '\$search_string' 通讯成功"
    exit 0
else
    echo "至少一个文件不包含 '\$search_string' 通讯失败"
    exit 1
fi

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>