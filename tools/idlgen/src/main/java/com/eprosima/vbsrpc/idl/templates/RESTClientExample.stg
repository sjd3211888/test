// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-12 ~ 2025-05: idlgen optimization: gerrit adaptation, -rti option filename adjustment, etc.
// ------------------------------------------------------------------

group RESTClientExample;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "ClientExample.cxx"], description=["This source file shows a simple example of how to create a proxy for an interface."])$

#include "$ctx.filename$Proxy.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include "$ctx.filename$RESTProtocol.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include <$ctx.includePrefix$transports/HttpProxyTransport.h>
#include <$ctx.includePrefix$exceptions/Exceptions.h>

#include <iostream>

using namespace eprosima::rpc;
using namespace eprosima::rpc::exception;
using namespace eprosima::rpc::transport;
using namespace eprosima::rpc::protocol::rest;

int main(int argc, char **argv)
{
    $ctx.filename$Protocol *protocol = NULL;
    ProxyTransport *transport = NULL;
    $first(ctx.scopedInterfaces).scopedname$Proxy *proxy = NULL;

    // Creation of the proxy for interface "$first(ctx.scopedInterfaces).scopedname$".
    try
    {
        protocol = new $ctx.filename$Protocol();
        transport = new HttpProxyTransport("127.0.0.1:8080");
        proxy = new $first(ctx.scopedInterfaces).scopedname$Proxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    $if(first(first(ctx.scopedInterfaces).operations).parameters)$
    // Create and initialize parameters.
    $first(first(ctx.scopedInterfaces).operations).parameters : {param | $varDecl(variable=param)$};separator="\n"$
    $first(first(ctx.scopedInterfaces).operations).parameters : {param | $if(!param.typecode.primitive)$$varComplexInitialize(variable=param)$$\n$$endif$}$
    $endif$
    $if(first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    // Create and initialize return value.
    $varDecl(variable=first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    $if(!first(first(ctx.scopedInterfaces).operations).rettypeparam.typecode.primitive)$
    $varComplexInitialize(variable=first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    $endif$
    $endif$

    // Call to remote procedure "$first(first(ctx.scopedInterfaces).operations).name$".
    try
    {
        $if(first(first(ctx.scopedInterfaces).operations).rettypeparam)$        $first(first(ctx.scopedInterfaces).operations).rettypeparam.name$ = $else$        $endif$proxy->$first(first(ctx.scopedInterfaces).operations).name$($extractParams(params=first(first(ctx.scopedInterfaces).operations).parameters)$);
    }
    $if(first(first(ctx.scopedInterfaces).operations).exceptions)$
    catch(UserException &ex)
    {
        std::cout << "User exception" << std::endl;
    }
    $endif$
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }
    $if(first(first(ctx.scopedInterfaces).operations).parameters)$

    $first(first(ctx.scopedInterfaces).operations).parameters : {param | $varDel(variable=param)$}; separator="\n"$
    $endif$
    $if(first(first(ctx.scopedInterfaces).operations).rettypeparam)$

    $varDel(variable=first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    $endif$

    delete(proxy);
    delete(transport);
    delete(protocol);

    return 0;
}

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<
$param_list$
>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
