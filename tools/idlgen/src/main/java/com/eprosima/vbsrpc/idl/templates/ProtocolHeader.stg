// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-12 ~ 2025-05: idlgen optimization: gerrit adaptation, -rti option filename adjustment, etc.
// ------------------------------------------------------------------

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "Protocol.h"], description=["This header file contains the declaration of the interface for all protocols."])$

#ifndef _$ctx.filename;format="toUpper"$_PROTOCOL_H_
#define _$ctx.filename;format="toUpper"$_PROTOCOL_H_

#include <$ctx.includePrefix$protocols/Protocol.h>
#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"
$if(ctx.dds)$
#include "$ctx.filename$AsyncCallbackHandlers.$if(ctx.GenHpp)$hpp$else$h$endif$"

$endif$
$if(ctx.server)$
#include "$ctx.filename$ServerImpl.$if(ctx.GenHpp)$hpp$else$h$endif$"

$endif$

namespace evbs
{
    namespace rpc
    {
        namespace protocol
        {
            /*!
             * @brief Protocol base class for the specific application
             * @ingroup $ctx.trimfilename$
             */
            class RPCUSERDllExport $ctx.filename$Protocol : public Protocol
            {
                public:

                   /*!
                    * @brief This method sets the transport for the communications. It has to be implemented by the children classes.
                    * @param transport Transport to use.
                    * @return True if the assignment is successful, false otherwise
                    */
                    virtual bool setTransport(evbs::rpc::transport::Transport &transport) = 0;

                        /*!
                         * @brief In some protocols this function activates needed entities to use an interface.
                         * @param interfaceName Interface name.
                         * @return Whether the activation works successfully.
                         */
                    virtual bool activateInterface(const char* interfaceName) = 0;

                    $if(ctx.server)$
                   /*!
                    * @brief This method links a specific servant with the protocol.
                    * @param impl Servant implementation.
                    */
                    void link$ctx.filename$Impl($ctx.filename$ServerImpl &impl)
                    {
                        _$ctx.filename$_impl = &impl;
                    }

                    $endif$

                    $definitions; separator="\n"$

                protected:

                    $ctx.filename$Protocol() : Protocol()
                    $if(ctx.server)$
                    , _$ctx.filename$_impl(NULL)
                    $endif$
                    {}

                    virtual ~$ctx.filename$Protocol(){}

                    $if(ctx.server)$

                    $ctx.filename$ServerImpl *_$ctx.filename$_impl;
                    $endif$

            };
        } // namespace protocol
    } // namespace rpc
} // namespace evbs

#endif // _$ctx.filename;format="toUpper"$_PROTOCOL_H_
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : {operation|
$if(ctx.client)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual int32_t $interface.formatedScopedname$_$operation.name$(/*in*/ int32_t async_flag$paramDeclarationsRpc(params=operation.inputparam)$, /*in*/ int32_t (*func)(int32_t$if(operation.rettypeparam)$, $paramRetType(operation.rettype)$$endif$$paramDefinitionCallback(params=operation.outputparam)$), /*in*/ int32_t time) = 0;
$endif$

$if(ctx.dds)$
$if(!operation.oneway)$
/*!
 * @brief This asynchronous method implements the proxy part of the protocol for the operation $operation.name$.
 *        It has to be implemented by the child classes.
 */
virtual void $interface.formatedScopedname$_$operation.name$_async($interface.scopedname$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, separatorInicial=", ")$) = 0;

$endif$
$endif$
}; separator="\n"$

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
