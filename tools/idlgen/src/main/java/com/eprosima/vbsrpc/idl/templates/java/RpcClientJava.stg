/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RpcClientJava;

main(ctx, definitions, package, module_name, interfacename) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "RpcClientJava.java"], description=["This header file contains the declaration of the proxy for all interfaces."])$

package $ctx.OnlyPackage$;

import VBSFramework.RPC.Client.RpcClient;

$definitions; separator="\n"$

>>

module(ctx, parent, module, definition_list) ::= <<
$definitions; separator="\n"$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list, module_name) ::= <<
public class $ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcClient extends RpcClient {
    protected $ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcServerObj mServerObj;

    private native void native_deinit(long ptr);
    private native long native_get_RpcServerObj(long ptr);

    public $ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcClient(long ptr) {
        super(ptr);
        Construct_RpcServerObj();
    }

    public void Construct_RpcServerObj() {
        long ptr = native_get_RpcServerObj(this.getNativePtr());
        mServerObj = new $ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcServerObj(ptr);
        if (ptr != 0) {
            mServerObj = new $ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcServerObj(ptr);
        } else {
            System.out.println("$ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcClient get RpcServerObj failed");
            mServerObj = null;
        }
    }

    public $ctx.filename$$if(module_name)$_$module_name$$endif$_$interface.name$_RpcServerObj get_RpcServerObj() {
        return mServerObj;
    }

    protected void finalize() throws Throwable {
        if (mServerObj != null) {
            mServerObj.finalize();
        }
        if (nativePtr != 0) {
            native_deinit(this.getNativePtr());
            setNativePtr(0);
        }
    }
}
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
