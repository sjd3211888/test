// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2024-01 ~ 2025-05: idlgen optimization: support for RPC server sync/async distinction, -rti option filename adjustment, exception callback, etc.
// ------------------------------------------------------------------

group ServerImplHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "ServerImpl.h"], description=["This header file contains the declaration of the skeleton for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$SERVER_IMPL_H_
#define _$ctx.filename;format="toUpper"$SERVER_IMPL_H_

#include <$ctx.includePrefix$utils/Messages.h>
#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include <$ctx.includePrefix$transports/ServerTransport.h>

$if(ctx.rtiTypes)$
#include "$ctx.filename$Extension.$if(ctx.GenHpp)$hpp$else$h$endif$"

$endif$

/*!
 * @brief This class is the skeleton of the servant and its remote procedures has to be implemented.
 * @ingroup $ctx.trimfilename$
 */
class $ctx.filename$ServerImpl
{
    public:

        //! @brief The default constructor.
        $ctx.filename$ServerImpl(){}

        //! @brief Destructor.
        virtual ~$ctx.filename$ServerImpl(){}

        $ctx.scopedInterfaces : { interface |
        $if(interface.stream)$
		$interface.all_operations : { operation |
		//! @brief Implementation of the remote procedure $operation.name$
		virtual $paramRetType(operation.rettype)$ $operation.name$(int32_t seq$paramDeclarationsRpc(params=operation.parameters)$,
                                 evbs::rpc::transport::ServerTransport &serverTransport,
                                 void *&buffer, size_t bufferSize, size_t readSize,
                                 evbs::rpc::transport::Endpoint *endpoint) = 0;
		}; separator="\n"$
        $else$
		$interface.all_operations : { operation |
		//! @brief Implementation of the remote procedure $operation.name$
		virtual $paramRetType(operation.rettype)$ $operation.name$($paramDeclarations(params=operation.parameters)$) = 0;
		}; separator="\n"$
        $endif$
		}; separator="\n"$

};

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$SERVER_IMPL_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
