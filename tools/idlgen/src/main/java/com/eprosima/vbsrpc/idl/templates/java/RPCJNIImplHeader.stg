/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RPCJNIImplHeader;

main(ctx, definitions, package, module_name, interfacename) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "RPCJNIImplHeader.cxx"], description=[""])$

$definitions; separator="\n"$
#ifdef __cplusplus
}
#endif
#endif
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list, module_name) ::= <<
#ifndef _Included_$ctx.PackageUnder$$ctx.filename$_$if(module_name)$$module_name$_$endif$$interface.name$_Impl
#define _Included_$ctx.PackageUnder$$ctx.filename$_$if(module_name)$$module_name$_$endif$$interface.name$_Impl

#include <jni.h>

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     $ctx.PackageUnder$$ctx.JniFilename$_$if(module_name)$$module_name$_$endif$$interface.name$_Impl
 * Method:    native_init
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_$ctx.PackageUnder$$ctx.JniFilename$_1$if(interface.HasScope)$$interface.UnderlineScope$_1$endif$$interface.UnderlineName$_1Impl_native_1init
        (JNIEnv *, jobject, jstring);

/*
 * Class:     $ctx.PackageUnder$$ctx.JniFilename$_$if(module_name)$$module_name$_$endif$$interface.name$_Impl
 * Method:    native_deinit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_$ctx.PackageUnder$$ctx.JniFilename$_1$if(interface.HasScope)$$interface.UnderlineScope$_1$endif$$interface.UnderlineName$_1Impl_native_1deinit
        (JNIEnv *, jobject, jlong);

>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

insertMember(ctx, parent, member) ::= <<>>

