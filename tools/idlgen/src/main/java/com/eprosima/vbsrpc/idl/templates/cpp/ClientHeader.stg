/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group ClientHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "Client.h"], description=["This header file contains the declaration of the server for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$CLIENT$if(!ctx.NotUseRandom)$_$ctx.RandomNumber$$endif$_H_
#define _$ctx.filename;format="toUpper"$CLIENT$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_H_

$if(ctx.NotUseVbsFramework)$
#include <erpc/utils/Utilities.h>
#include <erpc/client/RpcClient.h>
#include <erpc/client/RpcClientFactory.h>
$else$
$endif$

#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$CLIENT$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$ {
    $definition_list$
} // namespace $module.name$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
class $interface.name$ServerObj : public $evbs_namespace_get(ctx=ctx)$rpc::client::RpcServerObj
{
public:
    $interface.name$ServerObj($evbs_namespace_get(ctx=ctx)$rpc::transport::ProxyTransport &in_transport, const std::string in_interface)
    : $evbs_namespace_get(ctx=ctx)$rpc::client::RpcServerObj(in_transport, in_interface)
    {

    }

    ~$interface.name$ServerObj()
    {

    }

$interface.all_operations : {operation|

    int32_t $operation.name$($operation.Parameters : {param |/*$param.comment$*/ $param.typecode.cppTypename$ *$param.name$, }; separator=""$int32_t expire)
    {
        return get_transport()->sync_send(get_interface().c_str(), "$operation.name$",
                                    $operation.ParametersNameWithNullptr : {param |$param$, }; separator=""$expire);
    }

    int32_t $operation.name$($operation.Inputparam : {param |/*$param.comment$*/ $param.typecode.cppTypename$ *$param.name$, }; separator=""$std::function<void(int32_t, $evbs_namespace_get(ctx=ctx)$rpc::RpcMessageType *)>func, int32_t expire)
    {
        return get_transport()->async_send(get_interface().c_str(), "$operation.name$",
                                    $operation.InputParametersNameWithNullptr : {param |$param$, }; separator=""$func, expire);
    }

$if(operation.HasInput)$
$if(!operation.HasOutput)$
    int32_t $operation.name$($operation.Inputparam : {param |/*$param.comment$*/ $param.typecode.cppTypename$ *$param.name$}; separator=", "$)
    {
        return get_transport()->fire_forget_send(get_interface().c_str(), "$operation.name$",
                                    $operation.InputParametersNameWithNullptr : {param |$param$}; separator=", "$);
    }
$endif$
$endif$

}; separator="\n"$
};

class $interface.name$Client : public $evbs_namespace_get(ctx=ctx)$rpc::RpcClient
{
public:
    $interface.name$Client($evbs_namespace_get(ctx=ctx)$rpc::transport::ProxyTransport &in_transport,
     std::string in_interface_name) : $evbs_namespace_get(ctx=ctx)$rpc::RpcClient(in_transport, in_interface_name)
    {
        ServerObj = new $interface.name$ServerObj(in_transport, in_interface_name);
    }

    ~$interface.name$Client()
    {
        delete ServerObj;
    }

    $interface.name$ServerObj *get_serverobj()
    {
        return ServerObj;
    }

private:
    $interface.name$ServerObj *ServerObj = NULL;
};

$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

/*UTILS*/
evbs_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$vbs::$else$vbs::$endif$>>