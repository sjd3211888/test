/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RPCFactory;

main(ctx, definitions, package, module_name) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "RPCFactory.java"], description=["This header file contains the declaration of the proxy for all interfaces."])$

package $ctx.OnlyPackage$;

import java.lang.reflect.Constructor;
import VBSFramework.RPC.Client.RpcClient;

public class $ctx.filename$_RpcClientFactory {
    private long nativePtr;
    private native long native_init();
    private native void native_deinit(long ptr);
    private native long native_create_RpcClient(long ptr, String xml_path, String profile_name);
    private void setNativePtr(long ptr) { nativePtr = ptr; }

    public long getNativePtr() {
        return nativePtr;
    }

    public <T extends RpcClient> T CreateRpcClient(Class<T> Client_clazz, String xml_path, String client_profile_name)
    {
        long ptr = 0;
        ptr = native_create_RpcClient(this.nativePtr, xml_path, client_profile_name);
        if (ptr == 0) {
            System.out.println("CreateRpcClient() failed");
            return null;
        }
        try {
            Constructor<T> constructor = Client_clazz.getConstructor(Long.TYPE);
            T cli = constructor.newInstance(ptr);
            return cli;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public $ctx.filename$_RpcClientFactory()
    {
        nativePtr = native_init();
        if(nativePtr == 0) {
            System.out.println("Init RpcClientFactory failed");
        }
    }

    protected void finalize() throws Throwable {
        if (nativePtr != 0) {
            native_deinit(nativePtr);
            setNativePtr(0);
        }
    }
}

$definitions; separator="\n"$

>>

module(ctx, parent, module, definition_list) ::= <<
$definitions; separator="\n"$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list, module_name) ::= <<>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
