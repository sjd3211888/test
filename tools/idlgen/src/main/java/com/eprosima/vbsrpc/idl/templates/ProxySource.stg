// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-12 ~ 2025-05: idlgen optimization: gerrit adaptation, -rti option filename adjustment, version update, etc.
// ------------------------------------------------------------------

group ProxySource;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "Proxy.cxx"], description=["This source file contains the definition of the proxy for all interfaces."])$

#include "$ctx.filename$Proxy.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include <$ctx.includePrefix$transports/ProxyTransport.h>
#include "$ctx.filename$Protocol.$if(ctx.GenHpp)$hpp$else$h$endif$"

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
$interface.name$Proxy::$interface.name$Proxy(evbs::rpc::strategy::ProxyStrategy &strategy, evbs::rpc::transport::ProxyTransport &transport,
    evbs::rpc::protocol::$ctx.filename$Protocol &protocol) : Proxy(strategy, transport, protocol)
{
    protocol.activateInterface("$interface.scopedname$");
}

$interface.name$Proxy::~$interface.name$Proxy()
{
}

$interface.all_operations : {operation|
int32_t $interface.name$Proxy::$operation.name$(/*in*/ int32_t async_flag$paramDeclarationsRpc(params=operation.inputparam)$, /*in*/ int32_t (*func)(int32_t$if(operation.rettypeparam)$, $paramRetType(operation.rettype)$$endif$$paramDefinitionCallback(params=operation.outputparam)$), /*in*/ int32_t time)
{
    int32_t return_ =
    dynamic_cast<evbs::rpc::protocol::$ctx.filename$Protocol&>(getProtocol()).$interface.formatedScopedname$_$operation.name$(async_flag$extractParamsRpc(params=operation.inputparam)$, func, time);
    return return_;
}

$if(ctx.dds)$
$if(!operation.oneway)$
void $interface.name$Proxy::$operation.name$_async($interface.name$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, separatorInicial=", ")$)
{
    dynamic_cast<evbs::rpc::protocol::$ctx.filename$Protocol&>(getProtocol()).$interface.formatedScopedname$_$operation.name$_async(obj$extractParams(params=operation.inputparam, separatorInicial=", ")$);
}

$endif$
$endif$

$if(ctx.streamMode)$
/*
void StreamRPCTest()
{
	//this project is StreamRPC
}
*/
$endif$

}; separator="\n"$

$export_list$

>>
//$interface.exports : {export | $if(export.operation)$$functionAsyncImpl(operation=export)$$endif$}$

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
