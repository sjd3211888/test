// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2024-01 ~ 2025-05: idlgen optimization: support for RPC server sync/async distinction, -rti option filename adjustment, exception callback, zero copy variable length seq, etc.
// ------------------------------------------------------------------

group ServerImplHeaderExample;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "ServerImplExample.h"], description=["This header file contains an example of the declaration of a servant."])$

#ifndef _$ctx.filename;format="toUpper"$SERVER_IMPL_EXAMPLE$if(!ctx.NotUseRandom)$_$ctx.RandomNumber$$endif$_H_
#define _$ctx.filename;format="toUpper"$SERVER_IMPL_EXAMPLE$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_H_

$if(ctx.NotUseVbsFramework)$
#include <erpc/utils/Utilities.h>
#include <erpc/server/RpcServerFactory.h>
#include <erpc/server/RpcServerImpl.h>
$else$
$endif$

#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"
$definitions; separator="\n"$
#endif // _$ctx.filename;format="toUpper"$SERVER_IMPL_EXAMPLE$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
class $interface.name$_Impl : public vbs::rpc::server::RpcServerImpl {
public:
    $interface.name$_Impl(std::string profile_name):RpcServerImpl(profile_name) {
    this->exception_func = std::bind(&$interface.name$_Impl::on_exception_detected, this, std::placeholders::_1, std::placeholders::_2);

$interface.all_operations : {operation|
    this->IDL_table["$operation.name$"] = new vbs::rpc::server::IDL_information(std::bind(&$interface.name$_Impl::$operation.name$, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3$if(!operation.HasMethod)$, std::placeholders::_4$endif$),
                            $operation.ParametersTypeWithNullptr : {param |$param$}; separator=", "$);
}; separator="\n"$
    }

    virtual ~$interface.name$_Impl() {}

    void on_exception_detected(int32_t error_number, uint32_t conn_id);

$interface.all_operations : {operation|
    void $operation.name$($if(!operation.HasMethod)$uint32_t conn_id, vbs::rpc::RequestMode req_mode$else$vbs::rpc::ServerContext* context$endif$, vbs::rpc::RpcMessageType *$operation.Inputparam : {param |$param.name$}; separator=", "$, vbs::rpc::RpcMessageType *$operation.Outputparam : {param |$param.name$}; separator=", "$);
}; separator="\n"$
};

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

/*UTILS*/
evbs_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$vbs$else$vbs$endif$>>