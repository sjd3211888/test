/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group DDSSubscriberSourceZeroCopy;

main(ctx, definitions) ::= <<

$if(ctx.UseVbsFramework)$
#include <vbs/DomainParticipantFactory.hpp>
#include <vbs/DataReader.hpp>
#include <vbs/DataReaderQos.hpp>
$else$
#include <edds/dds/domain/DomainParticipantFactory.hpp>
#include <edds/dds/subscriber/DataReader.hpp>
#include <edds/dds/subscriber/SampleInfo.hpp>
#include <edds/dds/subscriber/Subscriber.hpp>
#include <edds/dds/subscriber/qos/DataReaderQos.hpp>
$endif$

#include <fstream>
$if(ctx.NotUseVbsFramework)$
#include <edds/rtps/resources/ResourceManagement.h>
#include <edds/rtps/attributes/PropertyPolicy.h>
#include <ertps/xmlparser/XMLProfileManager.h>
$endif$

#include "$ctx.filename$Subscriber.$if(ctx.GenHpp)$hpp$else$h$endif$"

$if(ctx.NotUseVbsFramework)$
using namespace evbs::edds::dds;
using namespace evbs::ertps::rtps;
using namespace evbs::ertps::types;
$endif$

$ctx.filename$Subscriber::$ctx.filename$Subscriber()
    : participant_(nullptr)
    $if(ctx.NotUseVbsFramework)$, subscriber_(nullptr)$endif$
    , topic_(nullptr)
    , reader_(nullptr)
    , type_(new $ctx.m_lastStructureTopicDataTypeName$PubSubType())
{
}

$ctx.filename$Subscriber::~$ctx.filename$Subscriber()
{
$if(ctx.NotUseVbsFramework)$
    if (reader_ != nullptr)
    {
        subscriber_->delete_datareader(reader_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    if (subscriber_ != nullptr)
    {
        participant_->delete_subscriber(subscriber_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
$else$
    if (participant_ != nullptr && reader_ != nullptr)
    {
        participant_->delete_data_reader(reader_);
    }
    if (participant_ != nullptr && topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    delete participant_;
    participant_ = nullptr;
$endif$

}

bool $ctx.filename$Subscriber::init(bool use_env)
{
    $if(ctx.NotUseVbsFramework)$
    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_sub");
    $endif$

    /* Create DomainParticipant*/
$if(ctx.TestExample)$
    std::string participant_profile_name = "test_xml_sub.xml_profile";
$else$
    std::string participant_profile_name = "pub_participant_profile";
$endif$

$if(ctx.UseVbsFramework)$
$if(ctx.TestExample)$
    std::string topic_profile_name = "$ctx.filename$Topic";
    std::string reader_profile_name = "test_reader_prof";
    std::string reader_profile_name_2 = "test_reader_prof2";
$else$
    std::string topic_profile_name = "$ctx.filename$Topic";
    std::string reader_profile_name = "test_reader_prof";
    std::string reader_profile_name_2 = "test_reader_prof2";
$endif$
$endif$

    $if(ctx.NotUseVbsFramework)$

    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    $else$
$if(ctx.TestExample)$
    participant_ =  $namespace_get(ctx=ctx)$DomainParticipantFactory::create_participant("test_xml_sub.xml", participant_profile_name);
$else$
    participant_ =  $namespace_get(ctx=ctx)$DomainParticipantFactory::create_participant(xml_config_file, participant_profile_name);
$endif$
    $endif$

    if (participant_ == nullptr)
    {
        return false;
    }

    $if(ctx.NotUseVbsFramework)$
    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE SUBSCRIBER
    subscriber_ = participant_->create_subscriber(vbsutil::xmlparser::getDefaultSubscriberQos(), nullptr);
    if (subscriber_ == nullptr)
    {
        return false;
    }

    /* Update DataReaderQoS from xml profile data */
    std::string profile_name = "subscriber_profile";

    dr_qos_ = vbsutil::xmlparser::getDefaultDataReaderQos();
    if (xml_config_file_.length() > 0)
    {
        subscriber_->get_datareader_qos_from_profile(profile_name, dr_qos_);
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "$ctx.filename$Topic",
        type_.get_type_name(),
        vbsutil::xmlparser::getDefaultTopicQos());
    $else$
    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "$ctx.filename$Topic",
        type_.get_type_name(),
        type_,
        topic_profile_name);
    $endif$

    if (topic_ == nullptr)
    {
        return false;
    }

$if(ctx.UseVbsFramework)$
    // CREATE THE WRITER
    reader_ = participant_->create_data_reader(topic_, reader_profile_name, &listener_);
$else$
    //CREATE THE READER
    dr_qos_.endpoint().history_memory_policy = MemoryManagementPolicy::PREALLOCATED_WITH_REALLOC_MEMORY_MODE;
    reader_ = subscriber_->create_datareader(topic_, dr_qos_, &listener_);
$endif$

    if (reader_ == nullptr)
    {
        return false;
    }

    return true;
}

void $ctx.filename$Subscriber::SubListener::on_subscription_matched(
    $namespace_get(ctx=ctx)$DataReader*,
        const $namespace_get(ctx=ctx)$SubscriptionMatchedStatus& info)
{
    if (info.current_count_change$if(ctx.UseVbsFramework)$()$endif$ == 1)
    {
        matched_ = info.total_count$if(ctx.UseVbsFramework)$()$endif$;
        std::cout << "Subscriber matched." << std::endl;

    }
    else if (info.current_count_change$if(ctx.UseVbsFramework)$()$endif$ == -1)
    {
        matched_ = info.total_count$if(ctx.UseVbsFramework)$()$endif$;
        std::cout << "Subscriber unmatched." << std::endl;

    }
    else
    {
        std::cout << info.current_count_change$if(ctx.UseVbsFramework)$()$endif$
                  << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
    }
}

void $ctx.filename$Subscriber::run()
{
$if(ctx.TestExample)$
$else$
    std::cout << "Waiting for Data, press Enter to stop the DataReader. " << std::endl;
$endif$

    std::string input;
    while (true) {
        std::getline(std::cin, input);
        if (input == "exit" || input == "quit") {
            std::cout << "Shutting down the Subscriber." << std::endl;
            break;
        }
    }
    std::cout << "Shutting down the Subscriber." << std::endl;
}

$if(ctx.TestExample)$
std::mutex $ctx.filename$Subscriber::file_mutex;
void $ctx.filename$Subscriber::writeToFile(const std::string& filename, const $ctx.m_lastStructureScopedName$& data) {
    std::lock_guard<std::mutex> lock(file_mutex);

    std::ofstream filestream(filename, std::ios::app);
    if (!filestream.is_open()) {
        std::cerr << "无法打开文件：" << filename << std::endl;
        return;
    }

    filestream << data << std::endl;
    filestream.close();
}
$endif$

void $ctx.filename$Subscriber::SubListener::on_data_available(
    $namespace_get(ctx=ctx)$DataReader* reader)
{
$if(ctx.UseEstimateSize)$
    $ctx.m_lastStructureScopedName$ st;
    auto ret = reader->take_next_sample(&st);
    if (ret == vbs::ReturnCode_t(vbs::ReturnCode_t::RETCODE_OK)) {
    $if(ctx.TestExample)$
        $ctx.filename$Subscriber::writeToFile("sub_output.txt", st);
    $else$
        std::cout<<st<<std::endl;
    $endif$

    } else {
        std::cout << "  receive mbuf is nullptr!!!" << std::endl;
    }
$else$
    vbs::LoanableCollection<$ctx.m_lastStructureScopedName$, std::false_type> st;
    vbs::SampleInfo info;
    reader->take(&st, &info);
    // Print your structure data here.
    for (int i = 0; i < static_cast<int>(st.length()); ++i) {
        const $ctx.m_lastStructureScopedName$ &out_example = st[i];
$if(ctx.TestExample)$
        $ctx.filename$Subscriber::writeToFile("sub_output.txt", out_example);
$else$
        std::cout << out_example << std::endl;
$endif$

    }
$endif$

}

void $ctx.filename$Subscriber::run(
        uint32_t number)
{
$if(ctx.TestExample)$
$else$
    std::cout << "Subscriber running until " << number << "samples have been received" << listener_.samples_<<std::endl;
$endif$

    while (number > listener_.samples_)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    }
}

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$ vbs::$endif$>>