/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RustSubExample;

main(ctx, definitions) ::= <<
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use std::{
    collections::BTreeMap,
    error::Error,
    rc::Rc,
    sync::{Arc, Mutex},
    thread,
    time::Duration,
};
use std::ffi::CString;
use std::os::raw::{c_void, c_char, c_int};

use vbs::{
    DataReader, DataReaderListenerInterface, DomainParticipant, Topic, VBSBaseStatus,
    VBSDeadlineMissedStatus, VBSEndpointCrashStatus, VBSLivelinessLostStatus, VBSMatchedStatus,
};
use vbs::TopicDataTypeWrapper;
$if(ctx.package)$
mod $ctx.OnlyPackage$;
use $ctx.OnlyPackage$::*;
$endif$
include!(concat!(env!("OUT_DIR"), "/typesbindings.rs"));

struct Subscriber {
    topic: Rc<Topic>,
    reader: Rc<DataReader>,
    participant: Rc<DomainParticipant>,
}
impl DataReaderListenerInterface for Subscriber {
    fn on_subscription_matched(&self, _reader: &DataReader, status: VBSMatchedStatus) {
        println!("on_subscription_matched(), status: {:?}", status);
    }

    fn on_data_available(&mut self, reader: &DataReader) {
        let data:$ctx.m_lastStructureScopedName$ = reader.take_next_sample();
        println!("message_received: {:?}", data);
    }

    fn on_liveliness_lost(&self, _reader: DataReader, status: VBSLivelinessLostStatus) {
        println!("Liveliness lost: {:?}", status);
    }

    fn on_endpoint_crash(&self, _reader: DataReader, status: VBSEndpointCrashStatus) {
        println!("Endpoint crash: {:?}", status);
    }

    fn on_requested_deadline_missed(&self, _reader: DataReader, status: VBSDeadlineMissedStatus) {
        println!("Requested deadline missed: {:?}", status);
    }

    fn on_sample_lost(&self, _reader: DataReader, status: VBSBaseStatus) {
        println!("Sample lost: {:?}", status);
    }
}

impl Subscriber {
    fn new() -> Result<Box<Subscriber>, &'static str> {
        // 创建 DomainParticipant
        let mut participant = DomainParticipant::new("test_xml_sub.xml", "test_xml_sub.xml_profile")
            .map_err(|_| "Failed to create DomainParticipant")?;

        // 创建 Topic
        let topic = participant
            .create_topic::<$ctx.m_lastStructureScopedName$Type>(
                "$ctx.m_lastStructureCScopedName$Topic",
                "$ctx.OnlyFileName$Topic",
            )
            .map_err(|_| "Failed to create Topic")?;
        let mut subscriber = Box::new(
            Subscriber {
                topic: Rc::new(topic),
                reader: Rc::new(DataReader::default()),
                participant: Rc::new(DomainParticipant::default())
            }
        );
        let listener: Box<&dyn DataReaderListenerInterface> = Box::new(&*subscriber);
        let mut reader = participant.create_data_reader(
            &subscriber.topic.as_ref(),
            "test_reader_prof")?;
        reader.set_listener(listener);
        subscriber.reader = Rc::new(*reader);
        subscriber.participant = Rc::new(participant);

        Ok(subscriber)
    }
}

impl Clone for Subscriber {
    fn clone(&self) -> Self {
        Subscriber {
            topic: Rc::clone(&self.topic),
            reader: Rc::clone(&self.reader),
            participant: Rc::clone(&self.participant),
        }
    }
}

fn main() -> Result<(), Box<dyn Error>\> {
    let _subscriber = Subscriber::new()?;
    println!("Subscriber is running...");
    // 保持程序运行
    loop {
        thread::sleep(Duration::from_secs(2));
    }

}
$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>
