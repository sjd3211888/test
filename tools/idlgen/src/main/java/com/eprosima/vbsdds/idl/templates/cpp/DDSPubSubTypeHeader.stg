// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-09 ~ 2025-05: idlgen optimization: gerrit adaptation, type description improvement, zero copy for variable length seq, open source optimization, etc.
// ------------------------------------------------------------------

group DDSPubSubTypeHeader;

main(ctx, definitions) ::= <<

#ifndef _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.RandomNumber$$endif$_$ctx.headerGuardName$_PUBSUBTYPES_H_
#define _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_$ctx.headerGuardName$_PUBSUBTYPES_H_

$if(ctx.NotUseVbsFramework)$
$if(ctx.HasMutable)$
#include <edds/dds/core/policy/QosPolicies.hpp>
#include <edds/rtps/common/InstanceHandle.h>
#include <edds/rtps/common/SerializedPayload.h>
$endif$

#include <deps/common/TopicDataType.hpp>
#include <deps/common/md5.h>
$else$
#include <vbs/Global.hpp>
$endif$

$ctx.FileNames : {include | #include "$include$$if(ctx.RtiIdl)$$else$PubSubTypes$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"}; separator="\n"$

#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error \
    Generated $ctx.filename$ is not compatible with current installed VBS DDS. Please, regenerate it with vbsddsgen.
#endif  // GEN_API_VER

$definitions; separator="\n"$

#endif
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<

$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation, isfirst) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= << >>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const, isfirst) ::= <<
>>

typedef_decl(ctx, parent, typedefs, isfirst) ::= <<

$if(typedefs.ScopednameList)$
$typedefs.ScopednameList : { namespace |
namespace $namespace$ \{
}; separator="\n"$
$endif$

$if(ctx.generateTypesC)$
$if(typedefs.typedefContentTypeCode.isSequenceType)$
$sequences_definition_impl(typecode=typedefs.typedefContentTypeCode, typename=typedefs.name)$
$else$
typedef $typedefs.typedefContentTypeCode.cppTypename$ $typedefs.name$;
$endif$
$else$
typedef $typedefs.typedefContentTypeCode.cppTypename$ $typedefs.name$;
$endif$

$if(typedefs.ScopednameList)$
$typedefs.ScopednameList : { namespace |
\}
}; separator="\n"$
$endif$

>>

struct_type(ctx, parent, struct, module_name, isfirst) ::= <<

$if(struct.ScopednameList)$
$struct.ScopednameList : { namespace |
namespace $namespace$ \{
}; separator="\n"$
$endif$

$if(ctx.HasMutable)$
$if(struct.isPlain)$
$if(!ctx.ZeroCopy)$
$if(struct.members)$
#ifndef SWIG
namespace detail {

template<typename Tag, typename Tag::type M>
struct $struct.name$_rob
{
    friend constexpr typename Tag::type get(
            Tag)
    {
        return M;
    }

};

struct $struct.name$_f
{
    typedef $last(struct.members).typecode.cppTypename$ $struct.name$::* type;
    friend constexpr type get(
            $struct.name$_f);
};

template struct $struct.name$_rob<$struct.name$_f, &$struct.name$::m_$last(struct.members).name$>;

template <typename T, typename Tag>
inline size_t constexpr $struct.name$_offset_of()
{
    return ((::size_t) &reinterpret_cast<char const volatile&>((((T*)0)->*get(Tag()))));
}

} // namespace detail
#endif // ifndef SWIG

$endif$
$endif$
$endif$
$endif$

/*!
 * @brief This class represents the TopicDataType of the type $struct.name$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
class $if(parent.IsInterface)$$parent.name$_$endif$$struct.name$PubSubType : public $evbs_namespace_get(ctx=ctx)$TopicDataType
{
public:

    typedef $if(parent.IsInterface)$$parent.name$_$endif$$struct.name$ type;

    vbs_user_DllExport $if(parent.IsInterface)$$parent.name$_$endif$$struct.name$PubSubType();

    vbs_user_DllExport virtual ~$if(parent.IsInterface)$$parent.name$_$endif$$struct.name$PubSubType() override;

$if(ctx.HasMutable)$
    vbs_user_DllExport bool serialize(
        void* data,
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload) override
    {
        return serialize(data, payload, $evbs_namespace_get(ctx=ctx)$DEFAULT_DATA_REPRESENTATION);
    }

    vbs_user_DllExport bool serialize(
        void* data,
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload,
        $evbs_namespace_get(ctx=ctx)$DataRepresentationId_t data_representation) override;

    vbs_user_DllExport bool deserialize(
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload,
        void* data) override;

    $if (struct.Top)$
    $if (struct.UseBBMode)$
    vbs_user_DllExport bool deserialize(
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload,
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* extra_payload,
        void* data) override;
    $endif$
    $endif$

    vbs_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override
    {
        return getSerializedSizeProvider(data, $evbs_namespace_get(ctx=ctx)$DEFAULT_DATA_REPRESENTATION);
    }

    vbs_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
            void* data,
            $evbs_namespace_get(ctx=ctx)$DataRepresentationId_t data_representation) override;
$else$
    vbs_user_DllExport virtual bool serialize(
        void* data,
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload) override;

    vbs_user_DllExport virtual bool deserialize(
            $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload,
            void* data) override;
    
    $if (struct.Top)$
    $if (struct.UseBBMode)$
    vbs_user_DllExport virtual bool deserialize(
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* payload,
        $rtps_namespace_get(ctx=ctx)$SerializedPayload_t* extra_payload,
        void* data) override;
    $endif$
    $endif$

    vbs_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
        void* data) override;
$endif$

    vbs_user_DllExport virtual bool getKey(
            void* data,
            $rtps_namespace_get(ctx=ctx)$InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    vbs_user_DllExport virtual void* createData() override;

    vbs_user_DllExport virtual void deleteData(
            void* data) override;

    vbs_user_DllExport virtual size_t getNonSerializedSize() override
    {
        return sizeof(type) + 4U;
    };

$if(struct.AnnotationVbsConfigSendType)$
    vbs_user_DllExport inline uint32_t getSendPeriod() const override
    {
        return $struct.AnnotationVbsConfigSendType$;
    }
$endif$

$if(struct.AnnotationVbsConfigSOALogFilter)$
    vbs_user_DllExport inline uint8_t getSoaLogFilter() const override
    {
        return $struct.AnnotationVbsConfigSOALogFilter$;
    }
$endif$

$if(struct.AnnotationVbsConfigTopicID)$
    vbs_user_DllExport inline uint16_t getTopicId() const override
    {
        return $struct.AnnotationVbsConfigTopicID$;
    }
$endif$

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    vbs_user_DllExport inline bool is_bounded() const override
    {
        return $if (!struct.CompatibleOrAppendableOrMutable)$$if (struct.isBounded)$true$else$false$endif$$else$false$endif$;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    vbs_user_DllExport inline bool is_plain() const override
    {
        return $if (!struct.annotationCompatible)$$if(struct.isPlain)$$if(ctx.HasMutable)$$if(!ctx.ZeroCopy)$is_plain_xcdrv1_impl()$else$true$endif$$else$true$endif$$else$false$endif$$else$false$endif$;
        //return false;
    }

$if(ctx.HasMutable)$
    vbs_user_DllExport inline bool is_plain(
        $evbs_namespace_get(ctx=ctx)$DataRepresentationId_t data_representation) const override
    {
        $if(struct.isPlain)$
        $if(!ctx.ZeroCopy)$
        if(data_representation == $evbs_namespace_get(ctx=ctx)$DataRepresentationId_t::XCDR2_DATA_REPRESENTATION)
        {
            return is_plain_xcdrv2_impl();
        }
        else
        {
            return is_plain_xcdrv1_impl();
        }
        $else$
        static_cast<void>(data_representation);
        return false;
        $endif$
        $else$
        static_cast<void>(data_representation);
        return false;
        $endif$
    }
$else$
$endif$

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    vbs_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        $if (struct.isPlain)$        new (memory) $if (parent.IsInterface)$$struct.scopedname$$else$$struct.name$$endif$()$else$        static_cast<void>(memory)$endif$;
        return $if (struct.isPlain)$true$else$false$endif$;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    vbs_user_DllExport inline bool is_big() const override { return $if(struct.UseBBMode)$true$else$false$endif$; }

$if(struct.Top)$
$if(struct.UseBBMode)$
    vbs_user_DllExport void* getBigBuffer(void* data) override;

    vbs_user_DllExport void setBigBuffer(void* data, void* buffer) override;

    vbs_user_DllExport uint32_t getBigBufferSize(void* data) override;
$endif$
$endif$

    $md5_namespace_get(ctx=ctx)$MD5 m_md5;
    unsigned char* m_keyBuffer;

$if(ctx.HasMutable)$
$if(struct.isPlain)$
$if(!ctx.ZeroCopy)$
private:

    static constexpr bool is_plain_xcdrv1_impl()
    {
        $if(struct.members)$
        return $struct.maxXCDRv1PlainTypeSerializedSize$ULL ==
            (detail::$struct.name$_offset_of<$struct.name$, detail::$struct.name$_f>() +
            sizeof($last(struct.members).typecode.cppTypename$));
        $elseif(struct.inheritance)$
        $if(struct.inheritance.isPlain)$
        return $struct.maxXCDRv1PlainTypeSerializedSize$ULL ==
            (detail::$struct.inheritance.name$_offset_of<$struct.inheritance.name$, detail::$struct.inheritance.name$_f>() +
            sizeof($last(struct.inheritance.members).typecode.cppTypename$));
        $else$
        return true;
        $endif$
        $else$
        return true;
        $endif$
    }

    static constexpr bool is_plain_xcdrv2_impl()
    {
        $if(struct.members)$
        return $struct.maxXCDRv2PlainTypeSerializedSize$ULL ==
            (detail::$struct.name$_offset_of<$struct.name$, detail::$struct.name$_f>() +
            sizeof($last(struct.members).typecode.cppTypename$));
        $elseif(struct.inheritance)$
        $if(struct.inheritance.isPlain)$
        return $struct.maxXCDRv2PlainTypeSerializedSize$ULL ==
            (detail::$struct.inheritance.name$_offset_of<$struct.inheritance.name$, detail::$struct.inheritance.name$_f>() +
            sizeof($last(struct.inheritance.members).typecode.cppTypename$));
        $else$
        return true;
        $endif$
        $else$
        return true;
        $endif$
    }

$endif$
$endif$
$endif$

};

$if(struct.ScopednameList)$
$struct.ScopednameList : { namespace |
\}
}; separator="\n"$
$endif$

$if(!ctx.NotUseVbsFramework)$
namespace vbs {
template<>
struct topic_type_support<$struct.scopedname$> {

static bool ToBuffer(const $struct.scopedname$& sample, std::vector<char>& buffer);

static bool FromBuffer($struct.scopedname$& sample, const std::vector<char>& buffer);

$if(!ctx.CJ)$
static std::string data_to_json(const $struct.scopedname$& sample,
        std::ostringstream* o_ptr = nullptr, const bool is_need_delete = true, const bool include_braces = true);
$endif$

};
}
$endif$

>>

union_type(ctx, parent, union, isfirst) ::= <<

>>

enum_type(ctx, parent, enum, isfirst) ::= <<

>>

bitmask_type(ctx, parent, bitmask, isfirst) ::= <<

>>

bitset_type(ctx, parent, bitset, isfirst) ::= <<

>>

/*UTILS*/
evbs_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>

md5_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::$else$vbs::$endif$>>

rtps_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::ertps::rtps::$else$vbs::$endif$>>
