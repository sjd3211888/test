// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-03 ~ 2025-05: Supported IDL DDS main workflow generation, zero-copy sequence, big memory move assignment bugfix, enhanced automation and random idl generation.
// ------------------------------------------------------------------

group DDSPubSubMain;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "PubSubMain.cpp"], description=["This file acts as a main entry point to the application."])$

$if(ctx.TestExample)$
#include <execinfo.h>
#include <csignal>
#include <dlfcn.h>
#include <cxxabi.h>
#include <cstdio>
#include <cstdlib>
$endif$

#include "$ctx.filename$Publisher.$if(ctx.GenHpp)$hpp$else$h$endif$"
#include "$ctx.filename$Subscriber.$if(ctx.GenHpp)$hpp$else$h$endif$"
$if(ctx.NotUseVbsFramework)$
#include <ertps/xmlparser/XMLProfileManager.h>

using namespace evbs::ertps;
using namespace evbs::ertps::rtps;
$endif$

$if(ctx.TestExample)$
void handler(int sig, siginfo_t *info, void *ucontext) {
    const int max_frames = 10;
    void *array[max_frames];
    size_t size = backtrace(array, max_frames);
    char **symbols = backtrace_symbols(array, size);

    fprintf(stderr, "Error: signal %d:\n", sig);

    for (size_t i = 0; i < size; ++i) {
        Dl_info dl_info;
        if (dladdr(array[i], &dl_info) && dl_info.dli_sname) {
            char *demangled = nullptr;
            int status = -1;
            if (dl_info.dli_sname[0] == '_') {
                demangled = abi::__cxa_demangle(dl_info.dli_sname, nullptr, 0, &status);
            }
            fprintf(stderr, "%-3zd %*p %s + %zd\n",
                    i, int(2 + sizeof(void*) * 2), array[i],
                    status == 0 ? demangled :
                    dl_info.dli_sname == 0 ? symbols[i] : dl_info.dli_sname,
                    (char*)array[i] - (char*)dl_info.dli_saddr);
            free(demangled);
        } else {
            fprintf(stderr, "%-3zd %*p %s\n",
                    i, int(2 + sizeof(void*) * 2), array[i], symbols[i]);
        }
    }

    free(symbols);
    exit(1);
}

void setup_signal_handlers() {
    struct sigaction sigact;
    sigact.sa_sigaction = handler;
    sigemptyset(&sigact.sa_mask);
    sigact.sa_flags = SA_RESTART | SA_SIGINFO;
    sigaction(SIGSEGV, &sigact, nullptr);
    sigaction(SIGABRT, &sigact, nullptr);
}
$endif$

int main(
        int argc,
        char** argv)
{
    // $if(ctx.TestExample)$
    // setup_signal_handlers();
    // $endif$

    int type = 0;
    std::string xml_config_file = "";

    if (argc >= 2)
    {
        if (strcmp(argv[1], "publisher") == 0)
        {
            type = 1;
        }
        else if (strcmp(argv[1], "subscriber") == 0)
        {
            type = 2;
        }
    }

    if (type == 0)
    {
        std::cout << "Error: Incorrect arguments." << std::endl;
        std::cout << "Usage: " << std::endl << std::endl;
        std::cout << argv[0] << " publisher|subscriber" << std::endl << std::endl;
        return 0;
    }
$if(ctx.NotUseVbsFramework)$
    if (argc == 3)
    {
        xml_config_file = argv[2];
    }
    if (xml_config_file.length() > 0)
    {
        xmlparser::XMLProfileManager::loadXMLFile(xml_config_file);
    }
$endif$

    // Register the type being used

    switch (type)
    {
        case 1:
        {
            $ctx.filename$Publisher mypub;
            if (mypub.init(xml_config_file))
            {
                std::cout << "Starting " << std::endl;
                mypub.run();
            }
            break;
        }
        case 2:
        {
            $ctx.filename$Subscriber mysub;
            if (mysub.init(xml_config_file))
            {
                std::cout << "Starting " << std::endl;
                mysub.run();
            }
            break;
        }
    }

    return 0;
}

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
