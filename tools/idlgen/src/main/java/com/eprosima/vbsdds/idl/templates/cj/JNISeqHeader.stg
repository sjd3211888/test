// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-05 ~ 2025-05: idlgen optimization: support pubsub mode java/jni code generation, java typedef, production efficiency optimization, etc.
// ------------------------------------------------------------------

group JNISeqHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "JNII.cxx"], description=[""])$

#ifndef _Included_LiDDS_Message_$ctx.filename$Seq
#define _Included_LiDDS_Message_$ctx.filename$Seq

#include <jni.h>

#ifdef __cplusplus
extern "C" {
#endif

$definitions; separator="\n"$
#ifdef __cplusplus
}
#endif
#endif
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<
/*
 * Class:     LiDDS_Generated_$struct.UnderlineScopeName$Seq
 * Method:    native_init_$struct.UnderlineScopeName$Seq
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1init_1$struct.UnderlineName$Seq
  (JNIEnv *, jobject);

/*
 * Class:     LiDDS_Generated_$struct.UnderlineScopeName$Seq
 * Method:    native_destroy_$struct.UnderlineScopeName$Seq
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1destroy_1$struct.UnderlineName$Seq
  (JNIEnv *, jobject, jlong);

/*
 * Class:     LiDDS_Generated_$struct.UnderlineScopeName$Seq
 * Method:    native_get_length
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1get_1length
  (JNIEnv *, jobject, jlong);

/*
 * Class:     LiDDS_Generated_$struct.UnderlineScopeName$Seq
 * Method:    native_get_element
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1get_1element
  (JNIEnv *, jobject, jlong, jint);
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
