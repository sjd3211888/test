/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group JNISeqSource;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "JNI.cxx"], description=[""])$

$ctx.directIncludeDependencies : {include | #include "$include$PubSubJNII.h"}; separator="\n"$
#include "$ctx.PackageUnder$$ctx.TargetStructScopFileName$Seq.h"
#include "$ctx.filename$PubSubTypes.h"
#include "../LiDDS_Global_Def.h"

#include <iostream>
#include <new>
#include <memory>

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<
$param_list$
>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<

extern "C" JNIEXPORT jlong JNICALL
Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1init_1$struct.UnderlineName$Seq(JNIEnv *env, jobject obj)
{
    long ret = 0;
    EDDS_SEQUENCE(DataSeq, $struct.Scopednamenormal$);
    DataSeq *datas = new DataSeq();
    // DataSeq *datas = new DataSeq(50);
    if (datas != nullptr)
        ret = reinterpret_cast<long>(datas);
    return ret;
}

extern "C" JNIEXPORT void JNICALL
Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1destroy_1$struct.UnderlineName$Seq(JNIEnv *env, jobject obj, jlong ptr)
{
    EDDS_SEQUENCE(DataSeq, $struct.Scopednamenormal$);
    DataSeq *datas = nullptr;

    datas = reinterpret_cast<DataSeq *>(ptr);
    if (datas == nullptr)
    {
        return;
    }

    delete datas;
}

extern "C" JNIEXPORT jint JNICALL
Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1get_1length(JNIEnv *env, jobject obj, jlong ptr)
{
    EDDS_SEQUENCE(DataSeq, $struct.Scopednamenormal$);
    int ret = 0;
    DataSeq *datas = nullptr;

    datas = reinterpret_cast<DataSeq *>(ptr);
    if (datas == nullptr)
    {
        return -1;
    }

    ret = datas->length();
    return ret;
}

extern "C" JNIEXPORT jlong JNICALL
Java_$ctx.PackageUnder$$struct.UnderlineScopeName$Seq_native_1get_1element(JNIEnv *env, jobject obj, jlong ptr, jint index)
{
    EDDS_SEQUENCE(DataSeq, $struct.Scopednamenormal$);
    long ret = 0;
    DataSeq *datas = nullptr;
    $struct.Scopednamenormal$ *data_ = nullptr;

    datas = reinterpret_cast<DataSeq *>(ptr);
    if (datas == nullptr)
    {
        return ret;
    }

    if (index >= datas->length())
    {
    }
    else
    {
        data_ = &(*datas)[index];
        ret = reinterpret_cast<long>(data_);
    }
    return ret;
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
