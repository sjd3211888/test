// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-09 ~ 2025-05: Improved Java typedef, efficiency; fixed sequence and compatibility issues.
// ------------------------------------------------------------------

group JavaSource;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "PubSub.java"], description=[""])$

$if(!ctx.isPackageEmpty)$
package $ctx.onlyPackage$;
$endif$

public class $ctx.filename$PubSub
{
    static
    {
        System.loadLibrary("$ctx.filename$PubSubJNI");
    }

    private native long create_participant();

    public boolean isInit() { return (participant_ != 0); }

    public $ctx.filename$PubSub()
    {
        participant_ = create_participant();
    }

    private native void delete_participant(long participant);

    public void dispose()
    {
        if(participant_ != 0)
        {
            delete_participant(participant_);
            participant_ = 0;
        }
    }

    private long participant_ = 0;

    $definitions; separator="\n"$
}
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
