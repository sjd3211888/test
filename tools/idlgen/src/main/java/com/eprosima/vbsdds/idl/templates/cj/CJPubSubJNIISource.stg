/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group CJPubSubJNIISource;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx,  file=[ctx.filename, "JNI.cxx"], description=[""])$

$ctx.directIncludeDependencies : {include | #include "$include$PubSubJNII.h"}; separator="\n"$
#include "$ctx.filename$PubSubTypes.h"
#include "VBSFramework_TopicDataType.h"
$if(ctx.NotUseVbsFramework)$
#include "../LiDDS_Global_Def.h"
$else$
#include <vbs/Global.hpp>
$endif$

#include <iostream>
#include <new>
#include <memory>

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<
$param_list$
>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<
#include "$ctx.PackageUnder$$struct.CScopednamenormal$PubSubJNII.h"

extern "C" JNIEXPORT jlong JNICALL
Java_$ctx.PackageUnder$$struct.UnderlineScopeName$PubSub_native_1init_1pubsub_1type(JNIEnv *env, jobject obj)
{
    long ret = 0;
    $topic_data_type_name(ctx=ctx)$ *ptr = new $struct.Scopednamenormal$PubSubType();
    if (ptr == nullptr) {
        std::cout << "Allocate Class $struct.Scopednamenormal$PubSubType memory failed\n" << std::endl;
        return (jlong)ret;
    }
    VBSFramework_TopicDataType *type = new VBSFramework_TopicDataType(ptr);
    if (type == nullptr)
    {
        std::cout << "Allocate Class VBSFramework_TopicDataType memory failed\n"
                  << std::endl;
        delete ptr;
        return (jlong)ret;
    }
    ret = reinterpret_cast<long>(type);
    return (jlong)ret;
}

extern "C" JNIEXPORT void JNICALL
Java_$ctx.PackageUnder$$struct.UnderlineScopeName$PubSub_native_1deinit_1pubsub_1type(JNIEnv *env, jobject obj, jlong ptr)
{
    VBSFramework_TopicDataType *type = reinterpret_cast<VBSFramework_TopicDataType *>(ptr);
    if (type != nullptr)
        delete type;
    type = nullptr;
    return;
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
topic_data_type_name(ctx) ::= <<$if(ctx.NotUseVbsFramework)$DDSTopicDataType$else$vbs::TopicDataType$endif$>>
