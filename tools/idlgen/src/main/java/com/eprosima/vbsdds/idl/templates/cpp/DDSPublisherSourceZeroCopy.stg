/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group DDSPublisherSourceZeroCopy;

main(ctx, definitions) ::= <<

#include "$ctx.filename$Publisher.$if(ctx.GenHpp)$hpp$else$h$endif$"

$if(ctx.UseVbsFramework)$
#include <vbs/DomainParticipantFactory.hpp>
#include <vbs/DataWriter.hpp>
#include <vbs/DataWriterQos.hpp>
$else$
#include <edds/dds/domain/DomainParticipantFactory.hpp>
#include <edds/dds/publisher/Publisher.hpp>
#include <edds/dds/publisher/qos/PublisherQos.hpp>
#include <edds/dds/publisher/DataWriter.hpp>
#include <edds/dds/publisher/qos/DataWriterQos.hpp>
#include <edds/rtps/resources/ResourceManagement.h>
#include <edds/rtps/attributes/PropertyPolicy.h>
#include <ertps/xmlparser/XMLProfileManager.h>
$endif$

#include <unistd.h>
#include <fstream>
#include <thread>
#include <chrono>

$if(ctx.NotUseVbsFramework)$
using namespace evbs::edds::dds;
using namespace evbs::ertps::rtps;
using namespace evbs::ertps::types;
$endif$

$ctx.filename$Publisher::$ctx.filename$Publisher()
    : participant_(nullptr)
$if(ctx.NotUseVbsFramework)$, publisher_(nullptr)$endif$
    , topic_(nullptr)
    , writer_(nullptr)
    , stop_(false)
    , start_(false)
    , type_(new $ctx.m_lastStructureTopicDataTypeName$PubSubType())
{
}

$ctx.filename$Publisher::~$ctx.filename$Publisher()
{
$if(ctx.UseVbsFramework)$
    if (participant_ != nullptr && writer_ != nullptr)
    {
        participant_->delete_data_writer(writer_);
    }
    if (participant_ != nullptr && topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    delete participant_;
    participant_ = nullptr;
$else$
    if (writer_ != nullptr)
    {
        publisher_->delete_datawriter(writer_);
    }
    if (publisher_ != nullptr)
    {
        participant_->delete_publisher(publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
$endif$

}

bool $ctx.filename$Publisher::init(bool use_env)
{
    /* Initialize data_ here */

    $if(ctx.NotUseVbsFramework)$
    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_pub");
    $endif$

    /* Create DomainParticipant*/
$if(ctx.TestExample)$
    std::string participant_profile_name = "test_xml_pub.xml_profile";
$else$
    std::string participant_profile_name = "pub_participant_profile";
$endif$

$if(ctx.UseVbsFramework)$
$if(ctx.TestExample)$
    std::string topic_profile_name = "$ctx.filename$Topic";
    std::string writer_profile_name = "test_writer_prof";
    std::string writer_profile_name_2 = "test_writer_prof2";
$else$
    std::string topic_profile_name = "$ctx.filename$Topic";
    std::string writer_profile_name = "test_writer_prof";
    std::string writer_profile_name_2 = "test_writer_prof2";
$endif$
$endif$

    $if(ctx.NotUseVbsFramework)$

    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    $else$

$if(ctx.TestExample)$
    participant_ = $namespace_get(ctx=ctx)$DomainParticipantFactory::create_participant("test_xml_pub.xml", participant_profile_name);
$else$
    participant_ = $namespace_get(ctx=ctx)$DomainParticipantFactory::create_participant(xml_config_file, participant_profile_name);
$endif$
    $endif$

    if (participant_ == nullptr)
    {
        return false;
    }

    $if(ctx.NotUseVbsFramework)$
    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE PUBLISHER
    publisher_ = participant_->create_publisher(vbsutil::xmlparser::getDefaultPublisherQos(), nullptr);
    if (publisher_ == nullptr)
    {
        return false;
    }

    /* Update DataWriterQoS from xml profile data */
    std::string profile_name = "publisher_profile";

    dw_qos_ = vbsutil::xmlparser::getDefaultDataWriteQos();

    publisher_->get_datawriter_qos_from_profile(profile_name, dw_qos_);

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "$ctx.filename$Topic",
        type_.get_type_name(),
        vbsutil::xmlparser::getDefaultTopicQos());
    $else$
    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "$ctx.filename$Topic",
        type_.get_type_name(),
        type_,
        topic_profile_name);
    $endif$

    if (topic_ == nullptr)
    {
        return false;
    }
$if(ctx.UseVbsFramework)$
    // CREATE THE WRITER
    writer_ = participant_->create_data_writer(topic_, writer_profile_name, &listener_);
$else$
    // CREATE THE WRITER
    dw_qos_.endpoint().history_memory_policy = MemoryManagementPolicy::PREALLOCATED_WITH_REALLOC_MEMORY_MODE;
    writer_ = publisher_->create_datawriter(topic_, dw_qos_, &listener_);
$endif$

    if (writer_ == nullptr)
    {
        return false;
    }

$if(ctx.TestExample)$
$else$
    std::cout << "$ctx.m_lastStructureScopedName$ DataWriter created." << std::endl;
$endif$

    return true;
}

void $ctx.filename$Publisher::PubListener::on_publication_matched(
    $namespace_get(ctx=ctx)$DataWriter*,
        const $namespace_get(ctx=ctx)$PublicationMatchedStatus& info)
{
    if (info.current_count_change$if(ctx.UseVbsFramework)$()$endif$ == 1)
    {
        matched_ = info.total_count$if(ctx.UseVbsFramework)$()$endif$;
        firstConnected_ = true;
$if(ctx.TestExample)$
$else$
        std::cout << "DataWriter matched." << std::endl;
$endif$

    }
    else if (info.current_count_change$if(ctx.UseVbsFramework)$()$endif$ == -1)
    {
        matched_ = info.total_count$if(ctx.UseVbsFramework)$()$endif$;
$if(ctx.TestExample)$
$else$
        std::cout << "DataWriter unmatched." << std::endl;
$endif$

    }
    else
    {
        std::cout << info.current_count_change$if(ctx.UseVbsFramework)$()$endif$
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void $ctx.filename$Publisher::runThread(
        uint32_t samples,
        uint32_t sleep)
{
    if (samples == 0)
    {
        int msgsent = 0;
        while (!stop_)
        {
            if (publish(msgsent++, true))
            {
            }
            std::this_thread::sleep_for(std::chrono::milliseconds(sleep));
        }
    }
    else
    {
        int msgsent = 0;
        for (uint32_t i = 0; i < samples; ++i)
        {
            if (!publish(msgsent++))
            {
                --i;
            }
            std::this_thread::sleep_for(std::chrono::milliseconds(sleep));
        }
    }
}

void $ctx.filename$Publisher::run(
    uint32_t samples,
    uint32_t sleep)
{
    stop_ = false;
    std::this_thread::sleep_for(std::chrono::milliseconds(300));
    std::thread thread(&$ctx.filename$Publisher::runThread, this, samples, sleep);
    if (samples == 0)
    {
$if(ctx.TestExample)$
$else$
        std::cout << "Publisher running. Please input exit or quit to stop the Publisher at any time." << std::endl;
$endif$
        std::string input;
        while (true) {
            std::getline(std::cin, input);
            if (input == "exit" || input == "quit") {
                std::cout << "Shutting down the Subscriber." << std::endl;
                break;
            }
        }
        stop_ = true;
    }
    else
    {
        std::cout << "Publisher running " << samples << " samples." << std::endl;
    }
    thread.join();

}

$if(ctx.TestExample)$
std::mutex $ctx.filename$Publisher::file_mutex;
void $ctx.filename$Publisher::writeToFile(const std::string& filename, const $ctx.m_lastStructureScopedName$& data) {
    std::lock_guard<std::mutex> lock(file_mutex);

    std::ofstream filestream(filename, std::ios::app);
    if (!filestream.is_open()) {
        std::cerr << "无法打开文件：" << filename << std::endl;
        return;
    }

    filestream << data << std::endl;
    filestream.close();
}
$endif$

bool $ctx.filename$Publisher::publish(
        int msgsent, bool waitForListener)
{
    if (listener_.firstConnected_ || !waitForListener || listener_.matched_ > 0)
    {
        void *sample = nullptr;
        bool ok = writer_->loan_sample(sample);
        if (ok) {
            if (!start_) {
                start_ = true;
                std::cout << "Starting " << std::endl;
            }
            $ctx.m_lastStructureScopedName$ *st = static_cast<$ctx.m_lastStructureScopedName$ *>(sample);
            st->updateTest(msgsent);
            bool res = false;
            while (!(res = writer_->write(sample))) {
                std::this_thread::sleep_for(std::chrono::milliseconds(300));
            }
$if(ctx.TestExample)$
            $ctx.filename$Publisher::writeToFile("pub_output.txt", *st);
$else$
            std::cout<<*st<<std::endl;
$endif$

            return true;
        } else {
            std::cout << "Pub mbuf is nullptr" << std::endl;
        }
    }
    return false;
}
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>