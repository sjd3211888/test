/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RustTestBash;

main(ctx, definitions) ::= <<
#!/bin/bash

if [ "\$#" -ne 2 ]; then
    echo "Usage: \$0 <runtime> <release_path>"
    exit 1
fi

runtime=\$1
release_path=\$2
$if(ctx.Rpc)$
# Terminate any running instances of the server or client
pkill -f './target/debug/service_server_example'
pkill -f './target/debug/service_client_example'

# Set the library path
export LD_LIBRARY_PATH=\$2

# Start the server
./target/debug/service_server_example > server_output.txt 2>&1 &
server_pid=\$!

# Give the server time to initialize
sleep 0.5

# Start the client
./target/debug/service_client_example > client_output.txt 2>&1 &
client_pid=\$!

# Wait for the specified runtime
sleep \$runtime

# Terminate the processes
kill \$client_pid
kill \$server_pid

# Wait for the processes to fully terminate
wait \$client_pid 2>/dev/null
wait \$server_pid 2>/dev/null

# Define success flag
success=1

# Validate the output files
if grep -q "rpc sync client success" client_output.txt; then
    echo "Client success"
else
    echo "Client did not report success"
    success=0
fi

if grep -q "response payload:" server_output.txt; then
    echo "Server success"
else
    echo "Server did not process the request"
    success=0
fi

# Optional: Further validation of outputs (e.g., specific payload content)
client_payload=\$(grep -oP 'the message is----\s*\K\[.*?\]' client_output.txt | head -1)
server_payload=\$(grep -oP 'response payload:\s*\K\[.*?\]' server_output.txt | head -1)

if [ -n "\$client_payload" ] && [ -n "\$server_payload" ]; then
    echo "Payloads read Success."
else
    echo "Payloads missing from outputs"
    success=0
fi

# Check the success flag
if [ "\$success" -eq 1 ]; then
    echo "Test SUCCESS!"
    exit 0
else
    echo "Test FAILED: See logs above for details"
    exit 1
fi
$else$
# Terminate any running instances of the publisher or subscriber
pkill -f './target/debug/pub_example'
pkill -f './target/debug/sub_example'

# Set the library path
export LD_LIBRARY_PATH=\$2

# Start the subscriber
./target/debug/sub_example > subscriber_output.txt 2>&1 &
subscriber_pid=\$!

# Give the subscriber time to initialize
sleep 0.5

# Start the publisher
./target/debug/pub_example > publisher_output.txt 2>&1 &
publisher_pid=\$!

# Wait for the specified runtime
sleep \$runtime

# Terminate the processes
kill \$publisher_pid
kill \$subscriber_pid

# Wait for the processes to fully terminate
wait \$publisher_pid 2>/dev/null
wait \$subscriber_pid 2>/dev/null

# Define success flag
success=1

# Validate the output files
if grep -q "on_publication_matched" publisher_output.txt; then
    echo "Publisher success"
else
    echo "Publisher did not report success"
    success=0
fi

if grep -q "on_subscription_matched" subscriber_output.txt; then
    echo "Subscriber success"
else
    echo "Subscriber did not receive messages"
    success=0
fi

# Optional: Further validation of outputs (e.g., specific message content)
published_message=\$(grep -oP '(?<=published_message:\s).*' publisher_output.txt | head -1)
received_message=\$(grep -oP '(?<=message_received:\s).*' subscriber_output.txt | head -1)

if [ -n "\$published_message" ] && [ -n "\$received_message" ]; then
    if [ "\$published_message" == "\$received_message" ]; then
        echo "Published and received messages match."
    else
        echo "Published and received messages do not match"
        success=0
    fi
else
    echo "Messages missing from outputs"
    success=0
fi

# Check the success flag
if [ "\$success" -eq 1 ]; then
    echo "Test SUCCESS!"
    exit 0
else
    echo "Test FAILED: See logs above for details"
    exit 1
fi

$endif$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<

>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>
