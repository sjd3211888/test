// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-03 ~ 2025-05: Supported Python swig cmake auto-generation, adapted zero-copy and main bugfixes.
// ------------------------------------------------------------------

group SwigCMake;

swig_cmake(solution) ::= <<

# Using minimum CMake version 3.13 to prevent issues with the SWIG include
# directories propagation happening with CMake 3.12 and prior

cmake_minimum_required(VERSION 3.16.3)

# SWIG: use standard target name.
if(POLICY CMP0078)
  cmake_policy(SET CMP0078 NEW)
endif()

# SWIG: use SWIG_MODULE_NAME property.
if(POLICY CMP0086)
  cmake_policy(SET CMP0086 NEW)
endif()

$solution.projects : {$subproject_compiler(project=it)$}; separator="\n"$

>>

subproject_compiler(project) ::= <<
###############################################################################
# Library for types defined in $it.name$ IDL
###############################################################################

message(STATUS "Configuring python wrapper for types in $it.name$...")

###############################################################################
# Type library on C++

if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    set(VBS_LIB_DIR "\${CMAKE_CURRENT_SOURCE_DIR}/../../LiDDS-Rel/max/windows-vbstools")
    # set ld library path
    # set(ENV{PATH} "\${VBS_LIB_DIR}/lib;\$ENV{PATH}")
else()
    set(VBS_LIB_DIR "\${CMAKE_CURRENT_SOURCE_DIR}/../../LiDDS-Rel/max/x64")
endif()

message(STATUS "system name: \${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "vbs lib: \${VBS_LIB_DIR}")

project($it.name$)

set(\${PROJECT_NAME}_FILES
    $it.name$.cxx
    $it.name$PubSubTypes.cxx
    )

include_directories()

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

#Create library for C++ types
add_library(\${PROJECT_NAME} SHARED \${\${PROJECT_NAME}_FILES})

target_link_directories(\${PROJECT_NAME} PRIVATE \${VBS_LIB_DIR}/lib)
target_include_directories(\${PROJECT_NAME} PUBLIC \${VBS_LIB_DIR}/include)

if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    target_link_libraries(\${PROJECT_NAME} PUBLIC
        stdc++
        mingw32
        ws2_32
        iphlpapi
        shlwapi
        mswsock
        wsock32
        asio
        tinyxml2
        \${OPENSSL_LIBRARIES}
        boost_atomic
        boost_thread
        boost_date_time
        boost_chrono
        foonathan_memory-0.7.1
        ecdr
        elog
        Python3::Module
        ertps
    )
else()
    target_link_libraries(\${PROJECT_NAME} PUBLIC
        ertps
        ecdr
    )
endif()

###############################################################################
# Python bindings for type

find_package(SWIG REQUIRED)
include(\${SWIG_USE_FILE})
set(CMAKE_SWIG_FLAGS "")

find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
set(PYTHON_INCLUDE_PATH \${Python3_INCLUDE_DIRS})
set(PYTHON_EXECUTABLE \${Python3_EXECUTABLE})
set(PYTHON_LIBRARIES \${Python3_LIBRARIES})

include_directories(\${PYTHON_INCLUDE_PATH})

set(\${PROJECT_NAME}_MODULE
    $it.name$Wrapper
    )

set(\${PROJECT_NAME}_MODULE_FILES
    \${PROJECT_NAME}.i
    )

SET_SOURCE_FILES_PROPERTIES(
    \${\${PROJECT_NAME}_MODULE_FILES}
    PROPERTIES CPLUSPLUS ON
    USE_TARGET_INCLUDE_DIRECTORIES TRUE
    )

include_directories(
    \${PROJECT_SOURCE_DIR}
    )

swig_add_library(\${\${PROJECT_NAME}_MODULE}
    TYPE SHARED
    LANGUAGE python
    SOURCES \${\${PROJECT_NAME}_MODULE_FILES})

target_link_directories(\${\${PROJECT_NAME}_MODULE} PRIVATE \${VBS_LIB_DIR}/lib)
target_include_directories(\${\${PROJECT_NAME}_MODULE} PUBLIC \${VBS_LIB_DIR}/include)

if(UNIX AND CMAKE_SIZEOF_VOID_P EQUAL 8)
    set_property(TARGET \${\${PROJECT_NAME}_MODULE} PROPERTY SWIG_COMPILE_DEFINITIONS SWIGWORDSIZE64)
endif()

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    target_link_libraries(\${\${PROJECT_NAME}_MODULE}
        stdc++
        mingw32
        ws2_32
        iphlpapi
        shlwapi
        mswsock
        wsock32
        asio
        tinyxml2
        \${OPENSSL_LIBRARIES}
        boost_atomic
        boost_thread
        boost_date_time
        boost_chrono
        foonathan_memory-0.7.1
        ecdr
        elog
        Python3::Module
        ertps
        \${PROJECT_NAME}
    )
else()
    SWIG_LINK_LIBRARIES(\${\${PROJECT_NAME}_MODULE}
        Python3::Module
        ertps
        \${PROJECT_NAME}
        )
endif()

# Find the installation path
#execute_process(COMMAND \${PYTHON_EXECUTABLE} -c "from distutils import sysconfig; print(sysconfig.get_python_lib(plat_specific=True, prefix='\${CMAKE_INSTALL_PREFIX}'))"
#    OUTPUT_VARIABLE _ABS_PYTHON_MODULE_PATH
#    OUTPUT_STRIP_TRAILING_WHITESPACE
#    )

#get_filename_component (_ABS_PYTHON_MODULE_PATH \${_ABS_PYTHON_MODULE_PATH} ABSOLUTE)
#file (RELATIVE_PATH _REL_PYTHON_MODULE_PATH \${CMAKE_INSTALL_PREFIX} \${_ABS_PYTHON_MODULE_PATH})
#SET (PYTHON_MODULE_PATH
#    \${_REL_PYTHON_MODULE_PATH}
#    )

# Install
#install(TARGETS \${PROJECT_NAME}
#    RUNTIME DESTINATION bin/
#    LIBRARY DESTINATION lib/
#    ARCHIVE DESTINATION lib/
#    )
#install(TARGETS \${\${PROJECT_NAME}_MODULE} DESTINATION \${PYTHON_MODULE_PATH})
#get_property(support_files TARGET \${\${PROJECT_NAME}_MODULE} PROPERTY SWIG_SUPPORT_FILES)
#install(FILES \${support_files} DESTINATION \${PYTHON_MODULE_PATH})

>>

