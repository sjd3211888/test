// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------
// Modification history:
// 2023-09 ~ 2025-05: idlgen optimization: gerrit adaptation, VBS framework support, open source optimization, etc.
// ------------------------------------------------------------------

group DDSSubscriberHeader;

main(ctx, definitions) ::= <<

#ifndef _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.RandomNumber$$endif$_$ctx.headerGuardName$_SUBSCRIBER_H_
#define _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_$ctx.headerGuardName$_SUBSCRIBER_H_

#include "$ctx.filename$$if(ctx.RtiIdl)$$else$PubSubTypes$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"

#include <mutex>
$if(ctx.UseVbsFramework)$
#include <vbs/DomainParticipant.hpp>
#include <vbs/DataReader.hpp>
#include <vbs/DataReaderListener.hpp>
#include <vbs/Global.hpp>
#include <vbs/DataReaderQos.hpp>
$if(ctx.DynamicEndPoint)$
#include <condition_variable>
#include <vbs/types/VBSDynamicData.h>
$endif$

$else$
#include <edds/dds/domain/DomainParticipant.hpp>
#include <edds/dds/subscriber/DataReader.hpp>
#include <edds/dds/subscriber/DataReaderListener.hpp>
#include <edds/dds/subscriber/Subscriber.hpp>
#include <edds/dds/subscriber/qos/DataReaderQos.hpp>
$endif$

class $ctx.filename$Subscriber
{
public:

    $ctx.filename$Subscriber();

    virtual ~$ctx.filename$Subscriber();

    bool init(const std::string& xml_config_file);

    void run();
$if(ctx.TestExample)$
    static void writeToFile(const std::string& filename, const $ctx.m_lastStructureScopedName$& data);

    static std::mutex file_mutex;
$endif$

private:

    $namespace_get(ctx=ctx)$DomainParticipant* participant_;
$if(ctx.NotUseVbsFramework)$
    evbs::edds::dds::Subscriber* subscriber_;
$endif$
    $namespace_get(ctx=ctx)$Topic* topic_;
    $namespace_get(ctx=ctx)$DataReader* reader_;
$if(ctx.DynamicEndPoint)$
    $namespace_get(ctx=ctx)$VBSDynamicType dyn_type_;
    $namespace_get(ctx=ctx)$VBSDynamicData* data_;
$endif$

    $namespace_get(ctx=ctx)$TypeSupport type_;

    std::string xml_config_file_;
    // QoS Profiles
    $namespace_get(ctx=ctx)$DataReaderQos dr_qos_;

    class SubListener : public $namespace_get(ctx=ctx)$DataReaderListener
    {
    public:

$if(ctx.DynamicEndPoint)$
    SubListener($ctx.filename$Subscriber *parent): parent_(parent) {}
    $ctx.filename$Subscriber *parent_;
$else$
    SubListener() $if(ctx.UseVbsFramework)${}$else$= default;$endif$
$endif$

        ~SubListener() override $if(ctx.UseVbsFramework)${}$else$= default;$endif$

        void on_data_available(
                $namespace_get(ctx=ctx)$DataReader* reader) override;

        void on_subscription_matched(
                $namespace_get(ctx=ctx)$DataReader* reader,
                const $namespace_get(ctx=ctx)$SubscriptionMatchedStatus& info) override;

        int matched = 0;
        uint32_t samples = 0;
}$if(ctx.DynamicEndPoint)$$else$ listener_$endif$;

$if(ctx.DynamicEndPoint)$
class ParticipantListener : public $namespace_get(ctx=ctx)$DomainParticipantListener {
     public:
        ParticipantListener($ctx.filename$Subscriber* sub): sub_(sub) { }
        ~ParticipantListener() { }
        void on_type_info($namespace_get(ctx=ctx)$DomainParticipant*, const std::string& type_name,
            const $namespace_get(ctx=ctx)$DynamicTypeInformation& type_info) override;
        $ctx.filename$Subscriber* sub_;
    } participant_listener_;

    SubListener* listener_;

std::mutex type_mtx_;
    std::condition_variable type_cv_;
$endif$

};

#endif // _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_$ctx.headerGuardName$_SUBSCRIBER_H_
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>