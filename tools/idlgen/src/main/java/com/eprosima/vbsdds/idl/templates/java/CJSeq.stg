/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group CJSeq;

main(ctx, definitions, package) ::= <<
$if(package)$
package $package$;
$endif$

import LiDDS.Message.LiDDSDataSeq;

$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<
import $ctx.OnlyPackage$.$struct.JavaScopedname$;

public class $struct.name$Seq extends LiDDSDataSeq<$struct.name$>
{
    private native long native_init_$struct.name$Seq();

    private native void native_destroy_$struct.name$Seq(long ptr);

    private native int native_get_length(long ptr);

    private native long native_get_element(long ptr, int index);

    /**
     * 获取$struct.name$Seq中$struct.name$对象的数量
     *
     * @return 成员对象数量
     */
    public int length() {
        int ret = 0;
        ret = native_get_length(this.getNativePtr());
        return ret;
    }

    /**
     * 获取$struct.name$Seq中指定索引位置的$struct.name$对象
     *
     * @param index 索引号
     * @return $struct.name$对象
     */
    public $struct.name$ getElement(int index) {
        long ptr = 0;
        ptr = native_get_element(this.getNativePtr(), index);
        if (ptr == 0) {
            System.out.println("Error: Invalid index for SampleInfoSeq");
        }
        $struct.name$ data = new $struct.name$();
        data.setNativePtr(ptr);
        data.copy_data_from_cpp();
        return data;
    }

    /**
     * 构建$struct.name$Seq对象，并初始化Native C++对象
     */
    public $struct.name$Seq() {
        long ret = 0;
        ret = native_init_$struct.name$Seq();
        if (ret == 0) {
            System.out.println("Error: Init $struct.name$Seq C++ Instance Failed");
        }
        setNativePtr(ret);
    }

    /**
     * 销毁$struct.name$Seq对象，并释放Native C++对象资源
     */
    protected void finalize() throws Throwable {
        if (getNativePtr() != 0) {
            System.out.println("Release Native $struct.name$ Sequence Resources");
            native_destroy_$struct.name$Seq(this.getNativePtr());
            setNativePtr(0);
        }
    }
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
