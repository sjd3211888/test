/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RustCargoToml;

main(ctx, definitions) ::= <<

[package]
name = "rust_$if(ctx.Rpc)$rpc$else$dds$endif$_example"
version = "0.2.1"
edition = "2021"
authors = ["lixiang <lixiang@lixiang.com>"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
bindgen = "=0.69.3"
cc = "*"
serde_json = "*"
[profile.release]
overflow-checks = true
[dependencies]
vbs = { version = "2.2.879", registry = "artifactory-dev-local" }

$if(ctx.TestExample)$
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
$endif$

[[bin]]
name = '$if(ctx.Rpc)$service_client$else$sub$endif$_example'
path = '$if(ctx.Rpc)$client$else$sub$endif$_example.rs'

[[bin]]
name = '$if(ctx.Rpc)$service_server$else$pub$endif$_example'
path = '$if(ctx.Rpc)$server$else$pub$endif$_example.rs'

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<

>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

/*UTILS*/
namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::edds::dds::$else$vbs::$endif$>>
