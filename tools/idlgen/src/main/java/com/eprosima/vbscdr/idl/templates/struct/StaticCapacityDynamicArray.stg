/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group StaticCapacityDynamicArray;

main(ctx, definitions) ::= <<

#ifndef _EDDS_GENERATED_StaticCapacityDynamicArray_H_
#define _EDDS_GENERATED_StaticCapacityDynamicArray_H_

#include <iostream>
#include <array>
#include <stdexcept>
#include <vector>

$if(!ctx.PureStructure)$
$if(!ctx.NotUseVbsFramework)$
#include <vbs/Global.hpp>
$endif$
$endif$

namespace vbs {
    template <typename T, size_t FixedCapacity>
    class StaticCapacityDynamicArray {
    public:
        StaticCapacityDynamicArray() : size_(0) {}

        StaticCapacityDynamicArray(size_t count, const T& value = T())
            : size_(count) {
            if (count > FixedCapacity) {
                throw std::out_of_range("Size exceeds fixed capacity: count = "
                                        + std::to_string(count)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            std::fill(data_.begin(), data_.begin() + count, value);
        }

        StaticCapacityDynamicArray(const StaticCapacityDynamicArray& other)
            : size_(other.size_), data_(other.data_) {}

        StaticCapacityDynamicArray& operator=(const StaticCapacityDynamicArray& other) {
            if (this != &other) {
                size_ = other.size_;
                data_ = other.data_;
            }
            return *this;
        }

        StaticCapacityDynamicArray(StaticCapacityDynamicArray&& other) noexcept
            : size_(other.size_), data_(std::move(other.data_)) {
            other.size_ = 0;
        }

        StaticCapacityDynamicArray& operator=(StaticCapacityDynamicArray&& other) noexcept {
            if (this != &other) {
                size_ = other.size_;
                data_ = std::move(other.data_);
                other.size_ = 0;
            }
            return *this;
        }

        void push_back(const T& value) {
            if (size_ >= FixedCapacity) {
                throw std::out_of_range("Exceeded fixed capacity: size = "
                                        + std::to_string(size_)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            data_[size_++] = value;
        }

        template <typename... Args>
        void emplace_back(Args&&... args) {
            if (size_ >= FixedCapacity) {
                throw std::out_of_range("Exceeded fixed capacity: size = "
                                        + std::to_string(size_)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            data_[size_++] = T(std::forward<Args>(args)...);
        }

        void pop_back() {
            if (empty()) {
                throw std::out_of_range("Array is empty, cannot pop.");
            }
            --size_;
        }

        T& operator[](size_t index) {
            if (index >= FixedCapacity) {
                throw std::out_of_range("Index out of range: index = "
                                        + std::to_string(index)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            return data_[index];
        }

        const T& operator[](size_t index) const {
            if (index >= FixedCapacity) {
                throw std::out_of_range("Index out of range: index = "
                                        + std::to_string(index)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            return data_[index];
        }

        T& at(size_t index) {
            if (index >= FixedCapacity) {
                throw std::out_of_range("Index out of range: index = "
                                        + std::to_string(index)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            return data_[index];
        }

        const T& at(size_t index) const {
            if (index >= FixedCapacity) {
                throw std::out_of_range("Index out of range: index = "
                                        + std::to_string(index)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            return data_[index];
        }

        size_t size() const {
            return size_;
        }

        size_t capacity() const {
            return FixedCapacity;
        }

        size_t all_capacity() const {
            return FixedCapacity;
        }

        void clear() {
            if (std::is_default_constructible<T>::value) {
                std::fill(data_.begin(), data_.begin() + size_, T());
            }
            size_ = 0;
        }

        bool empty() const {
            return size_ == 0;
        }

        T& front() {
            if (empty()) {
                throw std::out_of_range("Array is empty");
            }
            return data_[0];
        }

        const T& front() const {
            if (empty()) {
                throw std::out_of_range("Array is empty");
            }
            return data_[0];
        }

        T& back() {
            if (empty()) {
                throw std::out_of_range("Array is empty");
            }
            return data_[size_ - 1];
        }

        const T& back() const {
            if (empty()) {
                throw std::out_of_range("Array is empty");
            }
            return data_[size_ - 1];
        }

        void reserve(size_t new_capacity) {
            if (new_capacity > FixedCapacity) {
                throw std::out_of_range("Reserve exceeds fixed capacity: new_capacity = "
                                        + std::to_string(new_capacity)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
        }

        void resize(size_t new_size, T value = T()) {
            if (new_size > FixedCapacity) {
                throw std::out_of_range("Resize exceeds fixed capacity: new_size = "
                                        + std::to_string(new_size)
                                        + ", FixedCapacity = "
                                        + std::to_string(FixedCapacity));
            }
            if (new_size > size_) {
                std::fill(data_.begin() + size_, data_.begin() + new_size, value);
            }
            size_ = new_size;
        }

        T* data() {
            return data_.data();
        }

        const T* data() const {
            return data_.data();
        }

        operator std::vector<T>() const {
            return std::vector<T>(data_.begin(), data_.begin() + size_);
        }

        void swap(StaticCapacityDynamicArray& other) noexcept {
            std::swap(size_, other.size_);
            std::swap(data_, other.data_);
        }

        friend bool operator==(const StaticCapacityDynamicArray& lhs, const StaticCapacityDynamicArray& rhs) {
            return lhs.size_ == rhs.size_ && std::equal(lhs.data_.begin(), lhs.data_.begin() + lhs.size_, rhs.data_.begin());
        }

        friend bool operator!=(const StaticCapacityDynamicArray& lhs, const StaticCapacityDynamicArray& rhs) {
            return !(lhs == rhs);
        }

        typename std::array<T, FixedCapacity>::iterator begin() {
            return data_.begin();
        }

        typename std::array<T, FixedCapacity>::iterator end() {
            return data_.begin() + size_;
        }

        typename std::array<T, FixedCapacity>::const_iterator begin() const {
            return data_.begin();
        }

        typename std::array<T, FixedCapacity>::const_iterator end() const {
            return data_.begin() + size_;
        }

$if(!ctx.PureStructure)$
$if(!ctx.NotUseVbsFramework)$
        void serialize(vbs::Cdr& cdr) const {
            cdr.serialize(size_);
            try
            {
                cdr.serializeArray(data_.data(), size_);
            }
            catch (vbsutil::ecdr::exception::Exception& ex)
            {
                ex.raise();
            }
            return;
        }

        void deserialize(vbs::Cdr& cdr) {
            cdr.deserialize(size_);

            if (size_ == 0)
            {
                clear();
                return;
            }
            try
            {
                cdr.deserializeArray(data_.data(), size_);
                return;
            }
            catch (vbsutil::ecdr::exception::Exception& ex)
            {
                ex.raise();
            }
            return;
        }
$endif$
$endif$

    private:

        std::array<T, FixedCapacity> data_;
        size_t size_;
    };
}

#endif // _EDDS_GENERATED_StaticCapacityDynamicArray_H_
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<>>

union_type(ctx, parent, union, extensions) ::= <<>>

bitset_type(ctx, parent, bitset, extensions) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

/***** Utils *****/

public_struct_inheritances(parent) ::= <<>>

public_bitset_inheritances(parent) ::= <<>>

public_member_declaration(ctx, member) ::= <<>>

public_member_primitive_declaration(ctx, member) ::= <<>>

public_member_cstring_declaration(ctx, member) ::= <<>>

public_bitfield_declaration(member) ::= <<>>

private_member_declaration(member) ::= <<>>

public_unionmember_declaration(ctx, member) ::= <<>>

public_unionmember_primitive_declaration(ctx, member) ::= <<>>

public_unionmember_cstring_declaration(ctx, member) ::= <<>>

private_declaration(typecode, name) ::= <<>>

size_functions(type) ::= << >>

serialization_functions(type) ::= << >>

sequences_definition(typecode) ::= <<>>

/*UTILS*/
ertps_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::ertps::$else$vbs::$endif$>>
