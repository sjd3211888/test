/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group SafeEnumHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".h"], description=["This header file contains the declaration of the enum types defined in the IDL file for safe enumeration handling."])$

#ifndef _EDDS_GENERATED_SafeEnumHeader_H_
#define _EDDS_GENERATED_SafeEnumHeader_H_

#include <iostream>
#include <type_traits>
#include <cstdint>

$if(ctx.HideInternals)$
namespace CommonConstants {
    constexpr std::uintptr_t INVALID_POINTER_VALUE = ~static_cast<std::uintptr_t>(0);
}
$endif$

namespace vbs {
    template<typename def, typename inner = typename def::type>
    class safe_enum : public def {
    public:
        using inner_enum = inner;

    private:
        inner_enum val;

    public:
        safe_enum() : val(static_cast<inner_enum>(0)) {}

        safe_enum(inner_enum v) : val(v) {}

        safe_enum(uint32_t v) : val(static_cast<inner_enum>(v)) {}

        inner_enum underlying() const { return val; }

        inner_enum& underlying_ref() { return val; }

        bool operator == (const safe_enum & s) const { return val == s.val; }
        bool operator != (const safe_enum & s) const { return val != s.val; }
        bool operator <  (const safe_enum & s) const { return val <  s.val; }
        bool operator <= (const safe_enum & s) const { return val <= s.val; }
        bool operator >  (const safe_enum & s) const { return val >  s.val; }
        bool operator >= (const safe_enum & s) const { return val >= s.val; }

        friend void swap(safe_enum& left, safe_enum& right) noexcept {
            std::swap(left.val, right.val);
        }

        explicit operator uint32_t() const {
            return static_cast<uint32_t>(val);
        }
    };

    template<typename def, typename inner>
    std::ostream& operator<< (std::ostream& out, const safe_enum<def, inner>& the_enum)
    {
        out << the_enum.underlying();
        return out;
    }
}

#endif // _EDDS_GENERATED_SafeEnumHeader_H_
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<>>

union_type(ctx, parent, union, extensions) ::= <<>>

bitset_type(ctx, parent, bitset, extensions) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

/***** Utils *****/

public_struct_inheritances(parent) ::= <<>>

public_bitset_inheritances(parent) ::= <<>>

public_member_declaration(ctx, member) ::= <<>>

public_member_primitive_declaration(ctx, member) ::= <<>>

public_member_cstring_declaration(ctx, member) ::= <<>>

public_bitfield_declaration(member) ::= <<>>

private_member_declaration(member) ::= <<>>

public_unionmember_declaration(ctx, member) ::= <<>>

public_unionmember_primitive_declaration(ctx, member) ::= <<>>

public_unionmember_cstring_declaration(ctx, member) ::= <<>>

private_declaration(typecode, name) ::= <<>>

size_functions(type) ::= << >>

serialization_functions(type) ::= << >>

sequences_definition(typecode) ::= <<>>

/*UTILS*/
ertps_namespace_get(ctx) ::= <<$if(ctx.NotUseVbsFramework)$evbs::ertps::$else$vbs::$endif$>>
