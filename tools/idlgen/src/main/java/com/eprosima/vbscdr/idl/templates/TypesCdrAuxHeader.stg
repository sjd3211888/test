/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group TypesCdrAuxHeader;

main(ctx, definitions) ::= <<
$fileVBSHeader(ctx=ctx, file=[ctx.filename, "CdrAux.hpp"], description=["This source file contains some definitions of CDR related functions."])$

#ifndef _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.RandomNumber$$endif$_$ctx.headerGuardName$CDRAUX_HPP_
#define _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_$ctx.headerGuardName$CDRAUX_HPP_

#include "$ctx.filename$$if(ctx.RtiIdl)$Base$else$$endif$.$if(ctx.GenHpp)$hpp$else$h$endif$"

namespace vbsutil {
namespace ecdr {

class Cdr;
class CdrSizeCalculator;

$definitions; separator="\n"$

} // namespace vbsutil
} // namespace ecdr

#endif // _EDDS_GENERATED$if(!ctx.NotUseRandom)$_$ctx.LastRandomNumber$$endif$_$ctx.headerGuardName$CDRAUX_HPP_
$"\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

fwd_decl(ctx, parent, type) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list, operation_type) ::= <<

$operation_type$
$param_list$

>>

param_list(parameters) ::= <<>>

param(parameter, parameter_type) ::= <<

$parameter_type$

>>

const_decl(ctx, parent, const, const_type) ::= <<

$const_type$

>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<

$declarator_type$
$typedefs_type$

>>

struct_type(ctx, parent, struct, extensions, member_list) ::= <<
$member_list$
vbs_user_DllExport void serialize_key(
        vbsutil::ecdr::Cdr& scdr,
        const $struct.scopedname$& data);

>>

member_type(ctx, member, type_member, declarators) ::= <<

$type_member$
$declarators$

>>

bitset_type(ctx, parent, bitset) ::= <<>>

public_bitfield_definition(member) ::= <<>>

union_type(ctx, parent, union, switch_type) ::= <<

$switch_type$

>>

element_type(ctx, element, type_element, declarator) ::= <<

$type_element$
$declarator$

>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

sequence_type(ctx, sequence, type_sequence) ::= <<

$type_sequence$

>>

map_type(ctx, map, key_type, value_type) ::= <<

$key_type$
$value_type$

>>

string_type(ctx, string) ::= <<>>

wide_string_type(ctx, wstring) ::= <<>>

array_declarator(ctx, array, array_type) ::= <<>>
