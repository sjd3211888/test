/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group DataToJsonMain;

main(ctx, definitions) ::= <<
#include <iostream>
#include <fstream>
#include <string>

#include "$ctx.filename$.$if(ctx.GenHpp)$hpp$else$h$endif$"

int main() {
    $ctx.m_lastStructureScopedName$ tmp;
    std::ofstream file("output.json");

    if (file.is_open()) {
        $if(!ctx.CJ)$
        $if(!ctx.RmPrintHelper)$
        file << vbs::data_to_json_string(tmp);
        $endif$
        $endif$

        file.close();
        std::cout << "JSON string has been written to 'output.json'" << std::endl;
    } else {
        std::cerr << "Unable to open file" << std::endl;
        return 1;
    }
}
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$

>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$

>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>
