/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group ContainerPrintSources;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _EDDS_GENERATED_ContainerPrintSources_S_
#define _EDDS_GENERATED_ContainerPrintSources_S_

//$if(ctx.printexception)$
//#include <$ctx.product$/exceptions/UserException.h>
//$endif$

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>
#include <ostream>

#include "ContainerPrintHelpers.$if(ctx.GenHpp)$hpp$else$h$endif$"

template<>
void print(std::ostream& os, const std::wstring& str) {
    os << std::string(str.begin(), str.end());
}

std::wstring int_to_wstring(int index) {
    std::wstringstream ss;
    ss << index;
    return ss.str();
}

std::string int_to_string(int index) {
    std::stringstream ss;
    ss << index;
    return ss.str();
}

#endif // _EDDS_GENERATED_ContainerPrintSources_S_
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<>>

union_type(ctx, parent, union, extensions) ::= <<>>

bitset_type(ctx, parent, bitset, extensions) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

/***** Utils *****/

public_struct_inheritances(parent) ::= <<>>

public_bitset_inheritances(parent) ::= <<>>

public_member_declaration(ctx, member) ::= <<>>

public_member_primitive_declaration(ctx, member) ::= <<>>

public_member_cstring_declaration(ctx, member) ::= <<>>

public_bitfield_declaration(member) ::= <<>>

private_member_declaration(member) ::= <<>>

public_unionmember_declaration(ctx, member) ::= <<>>

public_unionmember_primitive_declaration(ctx, member) ::= <<>>

public_unionmember_cstring_declaration(ctx, member) ::= <<>>

private_declaration(typecode, name) ::= <<>>

size_functions(type) ::= << >>

serialization_functions(type) ::= << >>

sequences_definition(typecode) ::= <<>>
