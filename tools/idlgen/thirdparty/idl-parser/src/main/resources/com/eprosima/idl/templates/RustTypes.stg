/*
 * Copyright (c) 2025 Li Auto Inc. and its affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group RustTypes;

type_5(package) ::= <<f32>>

type_6(package) ::= <<f64>>

type_13(package) ::= <<f64>>

type_1(package) ::= <<i16>>

type_2(package) ::= <<i32>>

type_11(package) ::= <<i64>>

type_3(package) ::= <<u16>>

type_4(package) ::= <<u32>>

type_12(package) ::= <<u64>>

type_8(package) ::= <<i8>>

type_14(package) ::= <<i32>>

type_7(package) ::= <<bool>>

type_9(package) ::= <<u8>>

type_d(package, maxsize) ::= <<String>>
//TODO
type_15(package, maxsize) ::= <<String>>

//type_19() ::= <<std::collections::BTreeMap>>
type_19(package, key, value, maxsize, empty) ::= <<std::collections::BTreeMap<$key$, $value$>$empty$>>

type_f_first(package,prev) ::= <<[$prev$>>
type_f_second(package,prev, size) ::= <<$prev$; $size$]>>
type_f(package,firs, secon, type) ::= <<$firs$$type$$secon$>>

type_a(package, name) ::= <<$name$>>

type_b(package, name) ::= <<$name$>>

type_c(package, name) ::= <<$name$>>

type_10(package, name) ::= <<$name$>>

// TODO Para que sirve empty en VBSBuffers?
type_e(package, ctx, type, contenttype, maxsize, empty) ::= <<$type$$empty$>>

type_1a(package, name, type) ::= <<$name$>>

type_1b(package, name) ::= <<$name$>>

type_1d(package, name) ::= <<i8>>

type_1e(package, name) ::= <<u8>>

initialValues ::= [
        default: // not basic type.
]

