/*
* Copyright (c) 2025 Li Auto Inc. and its affiliates
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#ifndef MEMBUF_INC_BUFFER_INFO_H
#define MEMBUF_INC_BUFFER_INFO_H
#include <membuf/BaseType.h>
#include <membuf/buffer.h>
#include <membuf/BufferDesc.h>
#include <memory>
namespace mbuf {

/**
 * @brief Class BuildMbufContext, the context of rebuild membuf.
 *
 * @manager is used for rebuild membuf from BufferInfo
 * @userId  used for internal rebuild membuf
 *
 * @details Users only need to transparently transmit these two values,
 * which are mainly used for internal construction to improve performance
 */
struct BuildMbufContext {
    void* manager;
    UserID userId;
    BuildMbufContext();
    BuildMbufContext(void* manager, const UserID& userId);
};

/**
* @brief Class BufferInfo, contains the info to trace the buffer on the shared memory.
*/
using BufferInfo = BufferDesc;

/**
* @brief Class BufferUtil, contains the static interface to support BufferInfo.
*/
class BufferUtil {
 public:
    /**
  * @brief Get the buffer info of the buffer.
  * @details Get the info which used to trace the buffer on the
  * shared memory.
  *
  * @return BufferInfo.
  * @retval the buffer info generated by given buffer.
  */
    static BufferInfo GetBufferInfoFromBuffer(const std::shared_ptr<Buffer>& buffer);

    /**
  * @brief Get the buffer according to the buffer info use context for membuf
  * @details Get the buffer according to the buffer info on the
  * shared memory.
  *
  * @return std::shared_ptr<Buffer>.
  * @retval the buffer generated by given buffer info.
  */
    static std::shared_ptr<Buffer> GetBufferFromBufferInfo(BufferInfo buffer_info, const BuildMbufContext& context);
};
}  // namespace mbuf

#endif  // MEMBUF_INC_BUFFER_INFO_H
